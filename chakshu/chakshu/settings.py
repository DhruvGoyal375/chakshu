"""
Django settings for chakshu project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

from core.utils import get_env_variable

# Load environment variables
DEBUG = get_env_variable("DEBUG", "False").lower() == "true"
SECRET_KEY = get_env_variable("SECRET_KEY", "django-insecure-default-key-change-me")
ALLOWED_HOSTS = get_env_variable("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")

# Logging configuration
LOGGING_LEVEL = get_env_variable("LOG_LEVEL", "INFO").upper()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG and SECRET_KEY are now loaded from environment variables


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "api",
    "captioner",
    "core",
    "scraper",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

CORS_ORIGIN_ALLOW_ALL = get_env_variable("CORS_ORIGIN_ALLOW_ALL", "True").lower() == "true"
CORS_ALLOWED_ORIGINS = (
    get_env_variable("CORS_ALLOWED_ORIGINS", "").split(",") if get_env_variable("CORS_ALLOWED_ORIGINS", "") else []
)

ROOT_URLCONF = "chakshu.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "chakshu.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": get_env_variable("DB_ENGINE", "django.db.backends.sqlite3"),
        "NAME": BASE_DIR / get_env_variable("DB_NAME", "db.sqlite3"),
        "USER": get_env_variable("DB_USER", ""),
        "PASSWORD": get_env_variable("DB_PASSWORD", ""),
        "HOST": get_env_variable("DB_HOST", ""),
        "PORT": get_env_variable("DB_PORT", ""),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = get_env_variable("LANGUAGE_CODE", "en-us")
TIME_ZONE = get_env_variable("TIME_ZONE", "UTC")

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = get_env_variable("STATIC_URL", "static/")

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Local memory cache (for development)
CACHES = {
    "default": {
        "BACKEND": get_env_variable("CACHE_BACKEND", "django.core.cache.backends.locmem.LocMemCache"),
        "LOCATION": get_env_variable("CACHE_LOCATION", "image_captions_cache"),
        "TIMEOUT": int(get_env_variable("CACHE_TIMEOUT", "86400")),
    }
}

# Redis Cache (for production)
# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": "redis://127.0.0.1:6379/1",
#         "TIMEOUT": 86400,  # 1 day
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#         }
#     }
# }
