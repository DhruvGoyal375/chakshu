name: Build, Push Docker Images & Deploy to Azure ACI

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Docker & Docker-Compose
      run: |
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh get-docker.sh
        docker --version
        docker compose version

    - name: Create .env file
      run: |
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
        echo "DB_USER=${{ secrets.DB_USER }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
        echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env

    - name: Build Docker Images
      run: |
        docker compose build

    - name: List Docker Images
      run: |
        docker images

    - name: Log in to Docker Hub
      run: |
        echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

    - name: Tag Docker Images
      run: |
        USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
        
        # Tag each image with Docker Hub repo
        docker tag chakshu-chakshu:latest $USERNAME/chakshu-chakshu:latest
        docker tag chakshu-node:latest $USERNAME/chakshu-node:latest

    - name: Push Docker Images to Docker Hub
      run: |
        USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
        
        # Push each image to Docker Hub
        docker push $USERNAME/chakshu-chakshu:latest
        docker push $USERNAME/chakshu-node:latest

    - name: Deploy to Azure ACI with Static IP and FQDN
      run: |
        az login --service-principal \
          --username "${{ secrets.AZURE_CLIENT_ID }}" \
          --password "${{ secrets.AZURE_CLIENT_SECRET }}" \
          --tenant "${{ secrets.AZURE_TENANT_ID }}"

        RESOURCE_GROUP="${{ secrets.AZURE_RESOURCE_GROUP }}"
        CONTAINER_NAME="chakshu-container"
        IP_NAME="chakshu-public-ip"
        DNS_LABEL="chakshu-demo"

        # Check if the static IP exists, if not create it
        if ! az network public-ip show --resource-group "$RESOURCE_GROUP" --name "$IP_NAME" &> /dev/null; then
          echo "Static IP not found. Creating..."
          az network public-ip create \
            --resource-group "$RESOURCE_GROUP" \
            --name "$IP_NAME" \
            --sku Standard \
            --allocation-method Static \
            --dns-name "$DNS_LABEL"
        else
          echo "Static IP already exists."
        fi

        # Get Static IP and FQDN
        STATIC_IP=$(az network public-ip show \
          --resource-group "$RESOURCE_GROUP" \
          --name "$IP_NAME" \
          --query "ipAddress" \
          --output tsv)

        FQDN=$(az network public-ip show \
          --resource-group "$RESOURCE_GROUP" \
          --name "$IP_NAME" \
          --query "dnsSettings.fqdn" \
          --output tsv)

        echo "Static IP: $STATIC_IP"
        echo "FQDN: $FQDN"

        # Delete existing container if it exists
        if az container show --resource-group "$RESOURCE_GROUP" --name "$CONTAINER_NAME" &> /dev/null; then
          echo "Container $CONTAINER_NAME exists. Deleting..."
          az container delete --resource-group "$RESOURCE_GROUP" --name "$CONTAINER_NAME" --yes
        else
          echo "No existing container found."
        fi

        # Deploy the container with Static IP and FQDN
        az container create \
          --resource-group "$RESOURCE_GROUP" \
          --name "$CONTAINER_NAME" \
          --image "${{ secrets.DOCKERHUB_USERNAME }}/chakshu-chakshu:latest" \
          --cpu 4 --memory 16 \
          --ports 8000 80 \
          --os-type Linux \
          --restart-policy Always \
          --ip-address Public \
          --dns-name-label "$DNS_LABEL" \
          --environment-variables \
            DB_NAME="${{ secrets.DB_NAME }}" \
            DB_USER="${{ secrets.DB_USER }}" \
            DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            DB_HOST="${{ secrets.DB_HOST }}" \
            DB_PORT="${{ secrets.DB_PORT }}" \
            DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}"





    - name: Cleanup Docker Cache
      run: |
        docker system prune -af
