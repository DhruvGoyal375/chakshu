name: Build, Push Docker Images & Deploy with HTTPS on Azure ACI + Front Door

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Docker & Docker-Compose
      run: |
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh get-docker.sh
        docker --version
        docker compose version

    - name: Create .env file
      run: |
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
        echo "DB_USER=${{ secrets.DB_USER }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
        echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env

    - name: Build Docker Images
      run: |
        docker compose build

    - name: Log in to Docker Hub
      run: |
        echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

    - name: Tag and Push Docker Images
      run: |
        USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
        
        # Tag images
        docker tag chakshu-chakshu:latest $USERNAME/chakshu-chakshu:latest
        docker tag chakshu-node:latest $USERNAME/chakshu-node:latest

        # Push images to Docker Hub
        docker push $USERNAME/chakshu-chakshu:latest
        docker push $USERNAME/chakshu-node:latest

    # ✅ Deploy to Azure ACI (Full Resources)
    - name: Deploy to Azure ACI
      run: |
        az login --service-principal \
          --username "${{ secrets.AZURE_CLIENT_ID }}" \
          --password "${{ secrets.AZURE_CLIENT_SECRET }}" \
          --tenant "${{ secrets.AZURE_TENANT_ID }}"

        CONTAINER_NAME="chakshu-container"
        RESOURCE_GROUP="${{ secrets.AZURE_RESOURCE_GROUP }}"

        # Delete existing container if it exists
        if az container show --resource-group "$RESOURCE_GROUP" --name "$CONTAINER_NAME" &> /dev/null; then
          echo "Container $CONTAINER_NAME exists. Deleting..."
          az container delete --resource-group "$RESOURCE_GROUP" --name "$CONTAINER_NAME" --yes
        else
          echo "No existing container found."
        fi

        # Deploy with Full Resources (4 CPU, 16 GB RAM)
        az container create \
          --resource-group "$RESOURCE_GROUP" \
          --name "$CONTAINER_NAME" \
          --image "${{ secrets.DOCKERHUB_USERNAME }}/chakshu-chakshu:latest" \
          --cpu 4 --memory 16 \
          --dns-name-label "chakshu-demo" \
          --ports 8000 80 \
          --os-type Linux \
          --restart-policy Always \
          --registry-login-server "index.docker.io" \
          --registry-username "${{ secrets.DOCKERHUB_USERNAME }}" \
          --registry-password "${{ secrets.DOCKERHUB_PASSWORD }}" \
          --environment-variables \
            DB_NAME="${{ secrets.DB_NAME }}" \
            DB_USER="${{ secrets.DB_USER }}" \
            DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            DB_HOST="${{ secrets.DB_HOST }}" \
            DB_PORT="${{ secrets.DB_PORT }}" \
            DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}"

    # ✅ Configure Full-Fledged Azure Front Door (Not Free Tier)
    - name: Configure Azure Front Door
      run: |
        FRONTDOOR_NAME="chakshu-frontdoor"
        RESOURCE_GROUP="${{ secrets.AZURE_RESOURCE_GROUP }}"
        CONTAINER_FQDN="chakshu-demo.${{ secrets.AZURE_REGION }}.azurecontainer.io"

        # Check if Front Door exists
        if az network front-door show --name "$FRONTDOOR_NAME" --resource-group "$RESOURCE_GROUP" &> /dev/null; then
          echo "Azure Front Door $FRONTDOOR_NAME already exists. Skipping creation."
        else
          echo "Creating Azure Front Door..."

          az network front-door profile create \
            --resource-group "$RESOURCE_GROUP" \
            --name "$FRONTDOOR_NAME" \
            --sku Premium_AzureFrontDoor

         
          az network front-door frontend-endpoint create \
            --resource-group "$RESOURCE_GROUP" \
            --front-door-name "$FRONTDOOR_NAME" \
            --name "chakshu-frontend" \
            --host-name "$CONTAINER_FQDN" \
            --session-affinity-enabled false

       
          az network front-door backend-pool create \
            --resource-group "$RESOURCE_GROUP" \
            --front-door-name "$FRONTDOOR_NAME" \
            --name "chakshu-backend-pool" \
            --load-balancing-enabled true \
            --enforce-backend-pool-certificate-name-check false \
            --backends "host=$CONTAINER_FQDN httpPort=80 httpsPort=443"

 
          az network front-door routing-rule create \
            --resource-group "$RESOURCE_GROUP" \
            --front-door-name "$FRONTDOOR_NAME" \
            --name "chakshu-rule" \
            --frontend-endpoints "chakshu-frontend" \
            --accepted-protocols "Http Https" \
            --patterns-to-match "/*" \
            --route-type "Forward" \
            --backend-pool-name "chakshu-backend-pool"

          az network front-door probe create \
            --resource-group "$RESOURCE_GROUP" \
            --front-door-name "$FRONTDOOR_NAME" \
            --name "chakshu-health-probe" \
            --path "/" \
            --protocol "Http" \
            --interval-in-seconds 30 \
            --request-type "GET" \
            --health-check-path "/"

          echo "Azure Front Door created successfully."

    - name: Cleanup Docker Cache
      run: |
        docker system prune -af
