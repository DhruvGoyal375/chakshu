{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Chakshu","text":"<p>Chakshu is an accessibility-focused Django web application that helps blind and visually impaired users navigate and consume Wikipedia content through voice commands and structured text output.</p>"},{"location":"#what-is-chakshu","title":"What is Chakshu?","text":"<p>Chakshu transforms Wikipedia articles into accessible, screen-reader-friendly content by providing:</p> <ul> <li>Voice-command navigation for Wikipedia articles</li> <li>AI-powered image descriptions using advanced vision models</li> <li>Structured content extraction optimized for screen readers</li> <li>Table analysis and description for complex data</li> <li>Mathematical content conversion from LaTeX to readable text</li> <li>Citation and reference extraction for research purposes</li> </ul>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#smart-search-navigation","title":"\ud83d\udd0d Smart Search &amp; Navigation","text":"<p>Search Wikipedia articles and get structured results with short descriptions for easy navigation.</p>"},{"location":"#ai-image-captioning","title":"\ud83d\uddbc\ufe0f AI Image Captioning","text":"<p>Advanced computer vision generates detailed, accessibility-focused descriptions of all images on Wikipedia pages.</p>"},{"location":"#table-processing","title":"\ud83d\udcca Table Processing","text":"<p>Screenshots and analyzes complex Wikipedia tables, converting them to screen-reader-friendly descriptions.</p>"},{"location":"#mathematical-content","title":"\ud83e\uddee Mathematical Content","text":"<p>Converts LaTeX equations and chemical formulas into readable text format for text-to-speech systems.</p>"},{"location":"#comprehensive-content-access","title":"\ud83d\udcda Comprehensive Content Access","text":"<ul> <li>Short descriptions and summaries</li> <li>Full article content with structured formatting</li> <li>References and citations</li> <li>Image captions and descriptions</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Get Chakshu running in minutes:</p> <pre><code># Clone the repository\ngit clone https://github.com/DhruvGoyal375/chakshu.git\ncd chakshu\n\n# Install dependencies\npoetry install\n\n# Start the server\npython chakshu/manage.py runserver\n</code></pre>"},{"location":"#api-overview","title":"API Overview","text":"<p>Chakshu provides a simple REST API with three main endpoints:</p> <ol> <li>Search: <code>/api/search/?q={query}</code> - Find Wikipedia articles</li> <li>Select: <code>/api/select/?link={url}</code> - Get processing options for an article</li> <li>Process: <code>/api/process/?link={url}&amp;option={1-6}</code> - Extract specific content types</li> </ol>"},{"location":"#getting-started","title":"Getting Started","text":"<p>New to Chakshu? Start here:</p> <ol> <li>Project Overview - Understand Chakshu's mission and capabilities</li> <li>Quick Start - Get up and running in minutes</li> <li>API Documentation - Explore the REST API</li> <li>Features - Learn about accessibility features</li> </ol>"},{"location":"#architecture","title":"Architecture","text":"<p>Chakshu is built with modern technologies:</p> <ul> <li>Django 5.1 with REST Framework</li> <li>Ollama + Qwen2.5-VL for AI image captioning</li> <li>Playwright for table screenshot capture</li> <li>Docker for containerized deployment</li> <li>Poetry for dependency management</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Chakshu is an open-source project focused on digital accessibility. We welcome contributions that help make the web more accessible for visually impaired users.</p> <p>See our Contributing Guide to get started.</p>"},{"location":"configuration/","title":"Configuration Guide","text":"<p>This guide covers all configuration options for Chakshu, including environment variables, Django settings, external service configuration, and deployment-specific settings.</p>"},{"location":"configuration/#environment-variables","title":"Environment Variables","text":"<p>Chakshu uses environment variables for configuration to support different deployment environments and maintain security best practices.</p>"},{"location":"configuration/#core-django-settings","title":"Core Django Settings","text":"<pre><code># Basic Django Configuration\nDEBUG=False\nSECRET_KEY=your-production-secret-key-here-make-it-long-and-random\nALLOWED_HOSTS=yourdomain.com,www.yourdomain.com\n\n# Database Configuration\nDB_ENGINE=django.db.backends.postgresql\nDB_NAME=chakshu_prod\nDB_USER=chakshu_user\nDB_PASSWORD=secure_password_here\nDB_HOST=db\nDB_PORT=5432\n\n# Logging Configuration\nLOG_LEVEL=INFO\nLOG_FILE=logs/chakshu.log\n</code></pre>"},{"location":"configuration/#external-service-configuration","title":"External Service Configuration","text":"<pre><code># Wikipedia API Settings\nWIKI_USER_AGENT=Chakshu/1.0 (your-email@example.com)\n\n# AI Services\nOLLAMA_BASE_URL=http://ollama:11434\nMODEL_NAME=qwen2.5vl\n\n# LaTeX Processing Service\nLATEX_TO_TEXT_BASE_URL=http://latex_to_text:3000\n\n# Processing Settings\nIMAGE_PROCESSING_TIMEOUT=90\nTABLE_PROCESSING_TIMEOUT=120\nMAX_CONCURRENT_IMAGES=5\n</code></pre>"},{"location":"configuration/#security-and-cors-settings","title":"Security and CORS Settings","text":"<pre><code># CORS Configuration\nCORS_ORIGIN_ALLOW_ALL=False\nCORS_ALLOWED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com\n\n# Security Settings (Production)\nSECURE_SSL_REDIRECT=True\nSECURE_HSTS_SECONDS=31536000\nSECURE_HSTS_INCLUDE_SUBDOMAINS=True\nSECURE_HSTS_PRELOAD=True\nSECURE_CONTENT_TYPE_NOSNIFF=True\nSECURE_BROWSER_XSS_FILTER=True\nSESSION_COOKIE_SECURE=True\nCSRF_COOKIE_SECURE=True\n</code></pre>"},{"location":"configuration/#caching-configuration","title":"Caching Configuration","text":"<pre><code># Cache Backend (Development - Local Memory)\nCACHE_BACKEND=django.core.cache.backends.locmem.LocMemCache\nCACHE_LOCATION=image_captions_cache\nCACHE_TIMEOUT=86400\n\n# Cache Backend (Production - Redis)\nCACHE_BACKEND=django_redis.cache.RedisCache\nCACHE_LOCATION=redis://redis:6379/1\nCACHE_TIMEOUT=86400\n</code></pre>"},{"location":"configuration/#configuration-files","title":"Configuration Files","text":""},{"location":"configuration/#environment-file-env","title":"Environment File (.env)","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code># Copy the example file\ncp .env.example .env\n\n# Edit with your settings\nnano .env\n</code></pre> <p>Development Example: <pre><code>DEBUG=True\nSECRET_KEY=dev-key-change-in-production\nALLOWED_HOSTS=localhost,127.0.0.1\n\n# Use SQLite for development\nDB_ENGINE=django.db.backends.sqlite3\nDB_NAME=db.sqlite3\n\n# Local services\nOLLAMA_BASE_URL=http://localhost:11434\nLATEX_TO_TEXT_BASE_URL=http://localhost:3000\n\n# Development logging\nLOG_LEVEL=DEBUG\n</code></pre></p> <p>Production Example: <pre><code>DEBUG=False\nSECRET_KEY=your-very-secure-production-key-here\nALLOWED_HOSTS=chakshu.yourdomain.com\n\n# PostgreSQL for production\nDB_ENGINE=django.db.backends.postgresql\nDB_NAME=chakshu_prod\nDB_USER=chakshu_user\nDB_PASSWORD=secure_database_password\nDB_HOST=db\nDB_PORT=5432\n\n# Production services\nOLLAMA_BASE_URL=http://ollama:11434\nLATEX_TO_TEXT_BASE_URL=http://latex_to_text:3000\n\n# Production caching\nCACHE_BACKEND=django_redis.cache.RedisCache\nCACHE_LOCATION=redis://redis:6379/1\n\n# Security settings\nSECURE_SSL_REDIRECT=True\nSESSION_COOKIE_SECURE=True\nCSRF_COOKIE_SECURE=True\n\n# Production logging\nLOG_LEVEL=INFO\n</code></pre></p>"},{"location":"configuration/#django-settings-configuration","title":"Django Settings Configuration","text":""},{"location":"configuration/#database-configuration","title":"Database Configuration","text":"<p>SQLite (Development): <pre><code>DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n</code></pre></p> <p>PostgreSQL (Production): <pre><code>DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": get_env_variable(\"DB_NAME\", \"chakshu_prod\"),\n        \"USER\": get_env_variable(\"DB_USER\", \"chakshu_user\"),\n        \"PASSWORD\": get_env_variable(\"DB_PASSWORD\"),\n        \"HOST\": get_env_variable(\"DB_HOST\", \"localhost\"),\n        \"PORT\": get_env_variable(\"DB_PORT\", \"5432\"),\n    }\n}\n</code></pre></p>"},{"location":"configuration/#caching-configuration_1","title":"Caching Configuration","text":"<p>Local Memory Cache (Development): <pre><code>CACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.locmem.LocMemCache\",\n        \"LOCATION\": \"chakshu_cache\",\n        \"TIMEOUT\": 3600,\n    }\n}\n</code></pre></p> <p>Redis Cache (Production): <pre><code>CACHES = {\n    \"default\": {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": \"redis://redis:6379/1\",\n        \"TIMEOUT\": 3600,\n        \"OPTIONS\": {\n            \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n        }\n    }\n}\n</code></pre></p>"},{"location":"configuration/#logging-configuration","title":"Logging Configuration","text":"<pre><code>LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'verbose': {\n            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',\n            'style': '{',\n        },\n    },\n    'handlers': {\n        'file': {\n            'level': 'INFO',\n            'class': 'logging.handlers.RotatingFileHandler',\n            'filename': 'logs/chakshu.log',\n            'maxBytes': 10*1024*1024,  # 10MB\n            'backupCount': 5,\n            'formatter': 'verbose',\n        },\n        'console': {\n            'level': 'DEBUG',\n            'class': 'logging.StreamHandler',\n            'formatter': 'verbose',\n        },\n    },\n    'root': {\n        'handlers': ['file', 'console'],\n        'level': get_env_variable('LOG_LEVEL', 'INFO'),\n    },\n}\n</code></pre>"},{"location":"configuration/#external-service-configuration_1","title":"External Service Configuration","text":""},{"location":"configuration/#ollama-ai-service","title":"Ollama (AI Service)","text":"<p>Installation: <pre><code># Install Ollama\ncurl -fsSL https://ollama.ai/install.sh | sh\n\n# Pull the required model\nollama pull qwen2.5vl\n\n# Start the service\nollama serve\n</code></pre></p> <p>Configuration: <pre><code>OLLAMA_BASE_URL=http://localhost:11434\nMODEL_NAME=qwen2.5vl\nIMAGE_PROCESSING_TIMEOUT=90\n</code></pre></p> <p>Docker Configuration: <pre><code># docker-compose.yml\nollama:\n  image: ollama/ollama:latest\n  container_name: ollama\n  ports:\n    - \"11434:11434\"\n  restart: unless-stopped\n  volumes:\n    - ollama_data:/root/.ollama\n</code></pre></p>"},{"location":"configuration/#latex-to-text-service","title":"LaTeX-to-Text Service","text":"<p>Setup: <pre><code>cd latex_to_text\nnpm install\nnpm start\n</code></pre></p> <p>Configuration: <pre><code>LATEX_TO_TEXT_BASE_URL=http://localhost:3000\n</code></pre></p> <p>Docker Configuration: <pre><code># docker-compose.yml\nlatex_to_text:\n  build:\n    context: .\n    dockerfile: latex_to_text/Dockerfile\n  container_name: latex_to_text\n  ports:\n    - \"3000:3000\"\n  restart: unless-stopped\n</code></pre></p>"},{"location":"configuration/#wikipedia-api","title":"Wikipedia API","text":"<p>Configuration: <pre><code>WIKI_USER_AGENT=Chakshu/1.0 (your-email@example.com)\n</code></pre></p> <p>Rate Limiting: <pre><code># Built-in rate limiting for Wikipedia requests\nRATE_LIMIT = \"5/m\"  # 5 requests per minute\n</code></pre></p>"},{"location":"configuration/#performance-configuration","title":"Performance Configuration","text":""},{"location":"configuration/#processing-limits","title":"Processing Limits","text":"<pre><code># Image Processing\nMAX_CONCURRENT_IMAGES=5\nIMAGE_PROCESSING_TIMEOUT=90\n\n# Table Processing\nTABLE_PROCESSING_TIMEOUT=120\nMAX_CONCURRENT_TABLES=3\n\n# General Processing\nREQUEST_TIMEOUT=30\nMAX_RETRIES=3\n</code></pre>"},{"location":"configuration/#cache-settings","title":"Cache Settings","text":"<pre><code># Cache Timeouts (seconds)\nSEARCH_CACHE_TIMEOUT=3600      # 1 hour\nCONTENT_CACHE_TIMEOUT=3600     # 1 hour\nIMAGE_CACHE_TIMEOUT=86400      # 24 hours\nTABLE_CACHE_TIMEOUT=3600       # 1 hour\n</code></pre>"},{"location":"configuration/#memory-and-resource-limits","title":"Memory and Resource Limits","text":"<pre><code># Memory limits for processing\nMAX_MEMORY_PER_PROCESS=1GB\nMAX_PROCESSING_TIME=300\n\n# File size limits\nMAX_IMAGE_SIZE=10MB\nMAX_ARTICLE_SIZE=5MB\n</code></pre>"},{"location":"configuration/#security-configuration","title":"Security Configuration","text":""},{"location":"configuration/#production-security-settings","title":"Production Security Settings","text":"<pre><code># SSL/HTTPS\nSECURE_SSL_REDIRECT=True\nSECURE_HSTS_SECONDS=31536000\nSECURE_HSTS_INCLUDE_SUBDOMAINS=True\nSECURE_HSTS_PRELOAD=True\n\n# Content Security\nSECURE_CONTENT_TYPE_NOSNIFF=True\nSECURE_BROWSER_XSS_FILTER=True\nX_FRAME_OPTIONS=DENY\n\n# Cookies\nSESSION_COOKIE_SECURE=True\nSESSION_COOKIE_HTTPONLY=True\nCSRF_COOKIE_SECURE=True\nCSRF_COOKIE_HTTPONLY=True\n</code></pre>"},{"location":"configuration/#api-security","title":"API Security","text":"<pre><code># Rate Limiting\nRATE_LIMIT_SEARCH=5/m\nRATE_LIMIT_PROCESS=3/m\nRATE_LIMIT_GLOBAL=100/h\n\n# Request Validation\nMAX_QUERY_LENGTH=255\nMAX_URL_LENGTH=500\nALLOWED_WIKIPEDIA_DOMAINS=en.wikipedia.org\n</code></pre>"},{"location":"configuration/#docker-configuration","title":"Docker Configuration","text":""},{"location":"configuration/#docker-composeyml","title":"docker-compose.yml","text":"<pre><code>version: '3.8'\n\nservices:\n  chakshu:\n    build:\n      context: .\n      dockerfile: chakshu/Dockerfile\n    container_name: chakshu\n    ports:\n      - \"8000:8000\"\n    environment:\n      - DEBUG=False\n      - OLLAMA_BASE_URL=http://ollama:11434\n      - LATEX_TO_TEXT_BASE_URL=http://latex_to_text:3000\n    depends_on:\n      - ollama\n      - latex_to_text\n      - redis\n    restart: unless-stopped\n\n  ollama:\n    image: ollama/ollama:latest\n    container_name: ollama\n    ports:\n      - \"11434:11434\"\n    volumes:\n      - ollama_data:/root/.ollama\n    restart: unless-stopped\n\n  latex_to_text:\n    build:\n      context: .\n      dockerfile: latex_to_text/Dockerfile\n    container_name: latex_to_text\n    ports:\n      - \"3000:3000\"\n    restart: unless-stopped\n\n  redis:\n    image: redis:alpine\n    container_name: redis\n    ports:\n      - \"6379:6379\"\n    restart: unless-stopped\n\nvolumes:\n  ollama_data:\n</code></pre>"},{"location":"configuration/#environment-specific-overrides","title":"Environment-Specific Overrides","text":"<p>docker-compose.override.yml (Development): <pre><code>version: '3.8'\n\nservices:\n  chakshu:\n    environment:\n      - DEBUG=True\n      - LOG_LEVEL=DEBUG\n    volumes:\n      - .:/app\n    command: python manage.py runserver 0.0.0.0:8000\n</code></pre></p> <p>docker-compose.prod.yml (Production): <pre><code>version: '3.8'\n\nservices:\n  chakshu:\n    environment:\n      - DEBUG=False\n      - LOG_LEVEL=INFO\n    command: gunicorn chakshu.wsgi:application --bind 0.0.0.0:8000 --workers 3\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/ssl\n    depends_on:\n      - chakshu\n</code></pre></p>"},{"location":"configuration/#configuration-validation","title":"Configuration Validation","text":""},{"location":"configuration/#startup-checks","title":"Startup Checks","text":"<pre><code>def validate_configuration():\n    \"\"\"Validate configuration on startup.\"\"\"\n    required_vars = [\n        'SECRET_KEY',\n        'OLLAMA_BASE_URL',\n        'WIKI_USER_AGENT',\n    ]\n\n    for var in required_vars:\n        if not get_env_variable(var):\n            raise RuntimeError(f\"Required environment variable {var} is not set\")\n\n    # Test external services\n    if not test_ollama_connection():\n        logger.warning(\"Ollama service not available - image captioning disabled\")\n\n    if not test_latex_service():\n        logger.warning(\"LaTeX service not available - math processing disabled\")\n</code></pre>"},{"location":"configuration/#configuration-testing","title":"Configuration Testing","text":"<pre><code># Test configuration\npython manage.py check\n\n# Test database connection\npython manage.py dbshell\n\n# Test external services\ncurl http://localhost:11434/api/tags\ncurl http://localhost:3000/health\n</code></pre>"},{"location":"configuration/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"configuration/#common-issues","title":"Common Issues","text":"<p>Environment Variables Not Loading: <pre><code># Check if .env file exists and is readable\nls -la .env\ncat .env\n\n# Verify environment variables are set\npython -c \"import os; print(os.getenv('DEBUG'))\"\n</code></pre></p> <p>Database Connection Issues: <pre><code># Test PostgreSQL connection\npsql -h localhost -U chakshu_user -d chakshu_prod\n\n# Check Django database settings\npython manage.py dbshell\n</code></pre></p> <p>External Service Issues: <pre><code># Test Ollama service\ncurl http://localhost:11434/api/tags\n\n# Test LaTeX service\ncurl http://localhost:3000/health\n\n# Check service logs\ndocker logs ollama\ndocker logs latex_to_text\n</code></pre></p>"},{"location":"configuration/#configuration-debugging","title":"Configuration Debugging","text":"<pre><code># Debug configuration loading\nfrom core.utils import get_env_variable\n\nprint(\"DEBUG:\", get_env_variable(\"DEBUG\"))\nprint(\"OLLAMA_BASE_URL:\", get_env_variable(\"OLLAMA_BASE_URL\"))\nprint(\"DATABASE:\", settings.DATABASES['default'])\n</code></pre>"},{"location":"configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Installation Guide - Complete installation instructions</li> <li>Deployment Guide - Production deployment</li> <li>API Documentation - API configuration and usage</li> <li>Troubleshooting - Common configuration issues</li> </ul>"},{"location":"installation/","title":"Installation Guide","text":"<p>This guide provides detailed installation instructions for Chakshu, including development setup, Docker deployment, and production configuration.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing Chakshu, ensure you have the following installed:</p>"},{"location":"installation/#required-software","title":"Required Software","text":"<ul> <li>Python 3.10+ - Download Python</li> <li>Poetry - Install Poetry</li> <li>Git - Install Git</li> </ul>"},{"location":"installation/#optional-for-full-functionality","title":"Optional (for full functionality)","text":"<ul> <li>Docker &amp; Docker Compose - Install Docker</li> <li>Node.js 18+ - For LaTeX rendering service</li> <li>Ollama - For AI image captioning</li> </ul>"},{"location":"installation/#development-installation","title":"Development Installation","text":""},{"location":"installation/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/DhruvGoyal375/chakshu.git\ncd chakshu\n</code></pre>"},{"location":"installation/#2-configure-poetry","title":"2. Configure Poetry","text":"<p>Set up Poetry to create virtual environments within the project directory:</p> <pre><code>poetry config virtualenvs.in-project true\n</code></pre>"},{"location":"installation/#3-install-dependencies","title":"3. Install Dependencies","text":"<p>Install all Python dependencies using Poetry:</p> <pre><code>poetry install\n</code></pre> <p>This will create a virtual environment and install all required packages including development dependencies.</p>"},{"location":"installation/#4-activate-virtual-environment","title":"4. Activate Virtual Environment","text":"<pre><code>poetry shell\n</code></pre>"},{"location":"installation/#5-environment-configuration","title":"5. Environment Configuration","text":"<p>Create a <code>.env</code> file in the project root:</p> <pre><code>cp .env.example .env\n</code></pre> <p>Edit the <code>.env</code> file with your configuration:</p> <pre><code># Basic Django settings\nDEBUG=True\nSECRET_KEY=your-development-secret-key-here\nALLOWED_HOSTS=localhost,127.0.0.1\n\n# External services (optional for basic functionality)\nOLLAMA_BASE_URL=http://localhost:11434\nLATEX_TO_TEXT_BASE_URL=http://localhost:3000\nWIKI_USER_AGENT=Chakshu/1.0 (your-email@example.com)\n\n# Logging\nLOG_LEVEL=INFO\n</code></pre>"},{"location":"installation/#6-database-setup","title":"6. Database Setup","text":"<p>Run Django migrations to set up the database:</p> <pre><code>cd chakshu\npython manage.py migrate\n</code></pre>"},{"location":"installation/#7-start-the-development-server","title":"7. Start the Development Server","text":"<pre><code>python manage.py runserver\n</code></pre> <p>The API will be available at <code>http://localhost:8000/api/</code></p>"},{"location":"installation/#docker-installation","title":"Docker Installation","text":"<p>For a complete setup with all services, use Docker Compose:</p>"},{"location":"installation/#1-clone-and-navigate","title":"1. Clone and Navigate","text":"<pre><code>git clone https://github.com/DhruvGoyal375/chakshu.git\ncd chakshu\n</code></pre>"},{"location":"installation/#2-build-and-start-services","title":"2. Build and Start Services","text":"<pre><code>docker-compose up --build\n</code></pre> <p>This will start: - Chakshu Django app on port 8000 - Ollama service on port 11434 - LaTeX-to-text service on port 3000</p>"},{"location":"installation/#3-access-the-application","title":"3. Access the Application","text":"<ul> <li>API: <code>http://localhost:8000/api/</code></li> <li>Documentation: <code>http://localhost:8000/docs/</code> (if configured)</li> </ul>"},{"location":"installation/#service-dependencies-setup","title":"Service Dependencies Setup","text":""},{"location":"installation/#ollama-ai-image-captioning","title":"Ollama (AI Image Captioning)","text":"<ol> <li> <p>Install Ollama: <pre><code>curl -fsSL https://ollama.ai/install.sh | sh\n</code></pre></p> </li> <li> <p>Pull the Qwen2.5-VL model: <pre><code>ollama pull qwen2.5vl\n</code></pre></p> </li> <li> <p>Start Ollama service: <pre><code>ollama serve\n</code></pre></p> </li> </ol>"},{"location":"installation/#latex-to-text-service","title":"LaTeX-to-Text Service","text":"<ol> <li> <p>Navigate to the service directory: <pre><code>cd latex_to_text\n</code></pre></p> </li> <li> <p>Install Node.js dependencies: <pre><code>npm install\n</code></pre></p> </li> <li> <p>Start the service: <pre><code>npm start\n</code></pre></p> </li> </ol>"},{"location":"installation/#production-installation","title":"Production Installation","text":""},{"location":"installation/#1-server-requirements","title":"1. Server Requirements","text":"<p>Minimum Requirements: - 4 CPU cores - 8GB RAM - 50GB storage - Ubuntu 20.04+ or similar Linux distribution</p> <p>Recommended for AI features: - 8+ CPU cores - 16GB+ RAM - GPU support for faster AI processing</p>"},{"location":"installation/#2-system-dependencies","title":"2. System Dependencies","text":"<pre><code># Update system\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install system dependencies\nsudo apt install -y python3.10 python3.10-venv python3-pip git nginx postgresql postgresql-contrib redis-server\n\n# Install Docker (optional)\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n</code></pre>"},{"location":"installation/#3-application-setup","title":"3. Application Setup","text":"<pre><code># Create application user\nsudo useradd -m -s /bin/bash chakshu\nsudo su - chakshu\n\n# Clone repository\ngit clone https://github.com/DhruvGoyal375/chakshu.git\ncd chakshu\n\n# Install Poetry\ncurl -sSL https://install.python-poetry.org | python3 -\n\n# Install dependencies\npoetry install --no-dev\n</code></pre>"},{"location":"installation/#4-database-configuration","title":"4. Database Configuration","text":"<pre><code># Create PostgreSQL database\nsudo -u postgres createdb chakshu_prod\nsudo -u postgres createuser chakshu_user\nsudo -u postgres psql -c \"ALTER USER chakshu_user WITH PASSWORD 'secure_password';\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE chakshu_prod TO chakshu_user;\"\n</code></pre>"},{"location":"installation/#5-environment-configuration_1","title":"5. Environment Configuration","text":"<p>Create production <code>.env</code> file:</p> <pre><code>DEBUG=False\nSECRET_KEY=your-very-secure-production-key\nALLOWED_HOSTS=yourdomain.com,www.yourdomain.com\n\n# Database\nDB_ENGINE=django.db.backends.postgresql\nDB_NAME=chakshu_prod\nDB_USER=chakshu_user\nDB_PASSWORD=secure_password\nDB_HOST=localhost\nDB_PORT=5432\n\n# Cache\nCACHE_BACKEND=django_redis.cache.RedisCache\nCACHE_LOCATION=redis://127.0.0.1:6379/1\n\n# Security\nSECURE_SSL_REDIRECT=True\nSECURE_HSTS_SECONDS=31536000\nSESSION_COOKIE_SECURE=True\nCSRF_COOKIE_SECURE=True\n</code></pre>"},{"location":"installation/#6-static-files-and-database","title":"6. Static Files and Database","text":"<pre><code># Collect static files\npoetry run python chakshu/manage.py collectstatic --noinput\n\n# Run migrations\npoetry run python chakshu/manage.py migrate\n</code></pre>"},{"location":"installation/#7-systemd-service","title":"7. Systemd Service","text":"<p>Create <code>/etc/systemd/system/chakshu.service</code>:</p> <pre><code>[Unit]\nDescription=Chakshu Django Application\nAfter=network.target\n\n[Service]\nType=exec\nUser=chakshu\nGroup=chakshu\nWorkingDirectory=/home/chakshu/chakshu\nExecStart=/home/chakshu/chakshu/.venv/bin/gunicorn --chdir chakshu chakshu.wsgi:application --bind 127.0.0.1:8000 --workers 3\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Enable and start the service:</p> <pre><code>sudo systemctl enable chakshu\nsudo systemctl start chakshu\n</code></pre>"},{"location":"installation/#verification","title":"Verification","text":""},{"location":"installation/#test-basic-functionality","title":"Test Basic Functionality","text":"<ol> <li> <p>Health Check: <pre><code>curl http://localhost:8000/api/search/?q=test\n</code></pre></p> </li> <li> <p>Search Test: <pre><code>curl \"http://localhost:8000/api/search/?q=Python\"\n</code></pre></p> </li> <li> <p>Content Processing Test: <pre><code>curl \"http://localhost:8000/api/select/?link=https://en.wikipedia.org/wiki/Python\"\n</code></pre></p> </li> </ol>"},{"location":"installation/#test-ai-features-if-configured","title":"Test AI Features (if configured)","text":"<ol> <li> <p>Image Captioning Test: <pre><code>curl \"http://localhost:8000/api/process/?link=https://en.wikipedia.org/wiki/Python&amp;option=4\"\n</code></pre></p> </li> <li> <p>Table Analysis Test: <pre><code>curl \"http://localhost:8000/api/process/?link=https://en.wikipedia.org/wiki/Python&amp;option=5\"\n</code></pre></p> </li> </ol>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":"<p>Port Already in Use: <pre><code># Find process using port 8000\nsudo lsof -i :8000\n# Kill the process\nsudo kill -9 &lt;PID&gt;\n</code></pre></p> <p>Permission Errors: <pre><code># Fix file permissions\nsudo chown -R chakshu:chakshu /home/chakshu/chakshu\nchmod +x start_server.sh\n</code></pre></p> <p>Database Connection Issues: <pre><code># Check PostgreSQL status\nsudo systemctl status postgresql\n# Restart if needed\nsudo systemctl restart postgresql\n</code></pre></p> <p>Poetry Issues: <pre><code># Clear Poetry cache\npoetry cache clear --all pypi\n# Reinstall dependencies\npoetry install --no-cache\n</code></pre></p>"},{"location":"installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check the Troubleshooting Guide</li> <li>Review logs: <code>tail -f chakshu/logs/chakshu.log</code></li> <li>Open an issue on GitHub</li> <li>Join our community discussions</li> </ol>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>After installation:</p> <ol> <li>Configuration Guide - Configure Chakshu for your needs</li> <li>API Documentation - Learn how to use the API</li> <li>Development Guide - Start contributing to Chakshu</li> </ol>"},{"location":"project_overview/","title":"Project Overview","text":""},{"location":"project_overview/#mission-statement","title":"Mission Statement","text":"<p>Chakshu is dedicated to making Wikipedia accessible to blind and visually impaired users by transforming complex web content into structured, screen-reader-friendly formats through advanced AI and accessibility-focused design.</p>"},{"location":"project_overview/#the-problem-we-solve","title":"The Problem We Solve","text":"<p>Wikipedia contains vast amounts of human knowledge, but much of it remains inaccessible to visually impaired users due to:</p> <ul> <li>Complex visual layouts with tables, images, and mathematical content</li> <li>Unstructured content that's difficult for screen readers to navigate</li> <li>Visual elements like charts, diagrams, and images without proper descriptions</li> <li>Mathematical equations in LaTeX format that can't be read by text-to-speech systems</li> </ul>"},{"location":"project_overview/#our-solution","title":"Our Solution","text":"<p>Chakshu addresses these challenges through:</p>"},{"location":"project_overview/#accessibility-first-design","title":"\ud83c\udfaf Accessibility-First Design","text":"<p>Every feature is designed with screen readers and text-to-speech systems in mind, ensuring content is properly structured and navigable.</p>"},{"location":"project_overview/#advanced-ai-integration","title":"\ud83e\udd16 Advanced AI Integration","text":"<ul> <li>Qwen2.5-VL vision model for detailed image descriptions</li> <li>Playwright-based table capture for complex data visualization</li> <li>LaTeX-to-text conversion for mathematical content</li> <li>Chemical notation processing for scientific articles</li> </ul>"},{"location":"project_overview/#intelligent-content-processing","title":"\ud83d\udd04 Intelligent Content Processing","text":"<ul> <li>Structured content extraction with proper heading hierarchy</li> <li>Parallel processing for performance optimization</li> <li>Smart caching to reduce load times</li> <li>Error handling and graceful fallbacks</li> </ul>"},{"location":"project_overview/#core-workflow","title":"Core Workflow","text":"<pre><code>graph TD\n    A[User Search Query] --&gt; B[Google Search Wikipedia]\n    B --&gt; C[Article Selection]\n    C --&gt; D[Processing Options]\n    D --&gt; E[Content Type Selection]\n    E --&gt; F{Content Type}\n    F --&gt;|1| G[Short Description]\n    F --&gt;|2| H[Page Summary]\n    F --&gt;|3| I[Full Content]\n    F --&gt;|4| J[AI Image Captions]\n    F --&gt;|5| K[Table Analysis]\n    F --&gt;|6| L[Citations &amp; References]\n    G --&gt; M[Structured JSON Response]\n    H --&gt; M\n    I --&gt; M\n    J --&gt; M\n    K --&gt; M\n    L --&gt; M\n</code></pre>"},{"location":"project_overview/#technology-stack","title":"Technology Stack","text":""},{"location":"project_overview/#backend-framework","title":"Backend Framework","text":"<ul> <li>Django 5.1 - Robust web framework with excellent accessibility support</li> <li>Django REST Framework - API development with proper serialization</li> <li>Gunicorn - Production WSGI server</li> </ul>"},{"location":"project_overview/#ai-machine-learning","title":"AI &amp; Machine Learning","text":"<ul> <li>Ollama - Local AI model serving platform</li> <li>Qwen2.5-VL - State-of-the-art vision-language model</li> <li>Transformers - Hugging Face model integration</li> <li>PyTorch - Deep learning framework</li> </ul>"},{"location":"project_overview/#content-processing","title":"Content Processing","text":"<ul> <li>BeautifulSoup - HTML parsing and content extraction</li> <li>Playwright - Browser automation for table screenshots</li> <li>Joblib - Parallel processing for performance</li> <li>Wikipedia API - Structured data access</li> </ul>"},{"location":"project_overview/#infrastructure","title":"Infrastructure","text":"<ul> <li>Docker - Containerized deployment</li> <li>Poetry - Dependency management</li> <li>Redis - Production caching (optional)</li> <li>PostgreSQL - Production database support</li> </ul>"},{"location":"project_overview/#target-users","title":"Target Users","text":""},{"location":"project_overview/#primary-users","title":"Primary Users","text":"<ul> <li>Blind and visually impaired individuals seeking accessible Wikipedia content</li> <li>Screen reader users requiring properly structured content</li> <li>Students and researchers with visual impairments</li> </ul>"},{"location":"project_overview/#secondary-users","title":"Secondary Users","text":"<ul> <li>Accessibility developers building inclusive applications</li> <li>Educational institutions creating accessible learning materials</li> <li>Assistive technology providers integrating Wikipedia access</li> </ul>"},{"location":"project_overview/#key-differentiators","title":"Key Differentiators","text":""},{"location":"project_overview/#comprehensive-accessibility","title":"Comprehensive Accessibility","text":"<p>Unlike generic web scrapers, Chakshu is purpose-built for accessibility with features like: - Structured heading hierarchy - Detailed image descriptions - Table-to-text conversion - Mathematical content processing</p>"},{"location":"project_overview/#advanced-ai-integration_1","title":"Advanced AI Integration","text":"<p>Leverages cutting-edge vision models to provide context-aware image descriptions that go beyond simple alt-text.</p>"},{"location":"project_overview/#performance-optimized","title":"Performance Optimized","text":"<ul> <li>Parallel processing for multiple content types</li> <li>Intelligent caching strategies</li> <li>Efficient database queries</li> <li>Graceful error handling</li> </ul>"},{"location":"project_overview/#production-ready","title":"Production Ready","text":"<ul> <li>Comprehensive logging and monitoring</li> <li>Docker containerization</li> <li>Environment-based configuration</li> <li>Security best practices</li> </ul>"},{"location":"project_overview/#impact-vision","title":"Impact &amp; Vision","text":""},{"location":"project_overview/#immediate-impact","title":"Immediate Impact","text":"<ul> <li>Provides immediate access to Wikipedia's vast knowledge base for visually impaired users</li> <li>Reduces barriers to information access in education and research</li> <li>Demonstrates best practices for accessible web application development</li> </ul>"},{"location":"project_overview/#long-term-vision","title":"Long-term Vision","text":"<ul> <li>Expand to other knowledge sources beyond Wikipedia</li> <li>Integrate with voice assistants and smart speakers</li> <li>Develop mobile applications for on-the-go access</li> <li>Create educational partnerships with institutions serving visually impaired students</li> </ul>"},{"location":"project_overview/#open-source-commitment","title":"Open Source Commitment","text":"<p>Chakshu is committed to open source development because: - Accessibility should be free and available to everyone - Community contributions improve the platform for all users - Transparency builds trust in accessibility tools - Educational value helps developers learn accessibility best practices</p> <p>Join us in making the web more accessible for everyone.</p>"},{"location":"project_structure/","title":"Project Structure","text":"<p>The Chakshu project follows a standard Django project layout. Here's an overview of the key directories and files:</p> <pre><code>chakshu/\n\u251c\u2500\u2500 api/                      # Django app: Handles API routing and structure\n\u2502   \u251c\u2500\u2500 admin.py\n\u2502   \u251c\u2500\u2500 apps.py\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 migrations/\n\u2502   \u251c\u2500\u2500 models.py             # Database models for the 'api' app (if any)\n\u2502   \u251c\u2500\u2500 tests.py\n\u2502   \u251c\u2500\u2500 urls.py               # URL routing for the 'api' app\n\u2502   \u2514\u2500\u2500 views.py              # Views for the 'api' app (if any specific logic)\n\u251c\u2500\u2500 captioner/                # Django app: Responsible for image captioning\n\u2502   \u251c\u2500\u2500 admin.py\n\u2502   \u251c\u2500\u2500 apps.py\n\u2502   \u251c\u2500\u2500 image_captioner.py    # Core logic for image captioning\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 metadata_image_captioner.py # Alternative/additional captioning logic\n\u2502   \u251c\u2500\u2500 migrations/\n\u2502   \u251c\u2500\u2500 models.py             # Models for storing caption data (e.g., cached captions)\n\u2502   \u251c\u2500\u2500 tests.py\n\u2502   \u2514\u2500\u2500 views.py              # Views/functions like fetch_and_process_images\n\u251c\u2500\u2500 chakshu/                  # Main Django project directory\n\u2502   \u251c\u2500\u2500 asgi.py               # ASGI config for asynchronous serving\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 settings.py           # Django project settings\n\u2502   \u251c\u2500\u2500 urls.py               # Root URL configuration for the project\n\u2502   \u2514\u2500\u2500 wsgi.py               # WSGI config for synchronous serving\n\u251c\u2500\u2500 config.py                 # Custom configuration file (contents unknown)\n\u251c\u2500\u2500 core/                     # Django app: Core business logic and orchestration\n\u2502   \u251c\u2500\u2500 admin.py\n\u2502   \u251c\u2500\u2500 apps.py\n\u2502   \u251c\u2500\u2500 hyperlinks.py         # (Contents unknown, likely utility for links)\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 migrations/\n\u2502   \u251c\u2500\u2500 models.py             # Models for core entities (e.g., search history, pages)\n\u2502   \u251c\u2500\u2500 tests.py\n\u2502   \u251c\u2500\u2500 urls.py               # URL routing for the 'core' app API endpoints\n\u2502   \u251c\u2500\u2500 views.py              # Main API views (SearchResultsView, SelectLinkView, ProcessOptionView)\n\u2502   \u2514\u2500\u2500 wiki_api.py           # Wrapper for MediaWiki API interactions\n\u251c\u2500\u2500 demo.py                   # Standalone demonstration script (contents unknown)\n\u251c\u2500\u2500 Dockerfile                # Instructions for building a Docker image\n\u251c\u2500\u2500 __init__.py               # Makes the root 'chakshu' a Python package\n\u251c\u2500\u2500 manage.py                 # Django's command-line utility\n\u251c\u2500\u2500 output.txt                # Generic output file (likely for temporary results or logs)\n\u251c\u2500\u2500 README.md                 # Project README file, usually contains overview and setup\n\u2514\u2500\u2500 scraper/                  # Django app: Handles web scraping, particularly from Wikipedia\n    \u251c\u2500\u2500 admin.py\n    \u251c\u2500\u2500 apps.py\n    \u251c\u2500\u2500 imageScrapper.py      # Logic for scraping images (contents unknown)\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 migrations/\n    \u251c\u2500\u2500 models.py             # Models for scraped data (if any)\n    \u251c\u2500\u2500 scraper.py            # Core WikipediaScraper class logic\n    \u251c\u2500\u2500 tests.py\n    \u251c\u2500\u2500 urls.py               # URL routing for 'scraper' app (if any direct endpoints)\n    \u2514\u2500\u2500 views.py              # Helper views/functions for scraping tasks\n\u2514\u2500\u2500 summarizer/               # Django app: (Functionality to be inferred, likely text summarization)\n    # (Expected files: models.py, views.py, etc.)\n</code></pre>"},{"location":"project_structure/#key-components","title":"Key Components","text":""},{"location":"project_structure/#django-project-chakshu","title":"Django Project (<code>chakshu/</code>)","text":"<ul> <li><code>settings.py</code>: Contains all project configurations, including <code>INSTALLED_APPS</code>, <code>MIDDLEWARE</code>, <code>DATABASES</code>, <code>CACHES</code>, <code>SECRET_KEY</code>, etc. This is a crucial file for understanding how the project is wired up.</li> <li><code>urls.py</code>: The main URL router. It includes <code>admin.site.urls</code> and delegates API-related URLs to the <code>api</code> app (<code>api.urls</code>).</li> </ul>"},{"location":"project_structure/#django-apps","title":"Django Apps","text":"<ul> <li><code>api</code>:</li> <li>Acts as a primary entry point or namespace for the API.</li> <li> <p><code>api/urls.py</code> includes URLs from <code>core.urls</code> and <code>scraper.urls</code>. This suggests it might serve as an aggregator or API versioning layer.</p> </li> <li> <p><code>core</code>:</p> </li> <li>Contains central API logic.</li> <li><code>core/views.py</code> has the main views that handle client requests for search, selection, and processing.</li> <li><code>core/urls.py</code> defines endpoints like <code>/search/</code>, <code>/select/</code>, and <code>/process/</code>.</li> <li> <p><code>core/wiki_api.py</code> likely acts as a dedicated MediaWiki API client to fetch structured data.</p> </li> <li> <p><code>scraper</code>:</p> </li> <li>Manages web scraping tasks, focused on Wikipedia.</li> <li><code>scraper/scraper.py</code> likely contains the <code>WikipediaScraper</code> implementation.</li> <li> <p><code>scraper/views.py</code> defines helper functions like <code>get_short_description</code>, <code>get_citations</code>, and <code>get_full_content</code>, used by <code>core.views</code>.</p> </li> <li> <p><code>captioner</code>:</p> </li> <li>Generates or retrieves image captions.</li> <li><code>captioner/image_captioner.py</code> and <code>captioner/metadata_image_captioner.py</code> contain the captioning logic.</li> <li> <p><code>captioner/views.py</code> includes endpoints like <code>Workspace_and_process_images</code>, likely called by <code>core.views</code>.</p> </li> <li> <p><code>summarizer</code>:</p> </li> <li>Present in <code>INSTALLED_APPS</code>, but specific functionality is not shown.</li> <li>Presumably handles summarization of scraped text content.</li> </ul>"},{"location":"project_structure/#other-important-files","title":"Other Important Files","text":"<ul> <li><code>manage.py</code>: Utility script for running commands such as <code>runserver</code>, <code>makemigrations</code>, and <code>migrate</code>.</li> <li><code>Dockerfile</code>: Contains instructions to build a Docker image for the application.</li> <li><code>config.py</code>: A custom config file \u2014 possibly contains API keys, paths, or constants.</li> <li><code>README.md</code>: Project overview and setup instructions.</li> <li><code>demo.py</code>: Possibly demonstrates a specific feature or flow without requiring the full server to run.</li> </ul> <p>Understanding this structure will help developers navigate the codebase, debug issues efficiently, and contribute new features effectively.</p>"},{"location":"setup_guide/","title":"Quick Start Guide","text":"<p>Get Chakshu up and running in just a few minutes! This guide covers the fastest way to start using Chakshu for development or testing.</p>"},{"location":"setup_guide/#5-minute-setup","title":"\ud83d\ude80 5-Minute Setup","text":""},{"location":"setup_guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10+</li> <li>Poetry (Python package manager)</li> </ul>"},{"location":"setup_guide/#installation","title":"Installation","text":"<ol> <li> <p>Clone and enter the project: <pre><code>git clone https://github.com/DhruvGoyal375/chakshu.git\ncd chakshu\n</code></pre></p> </li> <li> <p>Install dependencies: <pre><code>poetry config virtualenvs.in-project true\npoetry install\n</code></pre></p> </li> <li> <p>Start the server: <pre><code>poetry shell\npython chakshu/manage.py runserver\n</code></pre></p> </li> </ol> <p>\ud83c\udf89 That's it! Chakshu is now running at <code>http://localhost:8000</code></p>"},{"location":"setup_guide/#test-your-installation","title":"\ud83e\uddea Test Your Installation","text":"<p>Try these API calls to verify everything works:</p>"},{"location":"setup_guide/#1-search-for-articles","title":"1. Search for Articles","text":"<pre><code>curl \"http://localhost:8000/api/search/?q=Python\"\n</code></pre>"},{"location":"setup_guide/#2-get-article-options","title":"2. Get Article Options","text":"<pre><code>curl \"http://localhost:8000/api/select/?link=https://en.wikipedia.org/wiki/Python\"\n</code></pre>"},{"location":"setup_guide/#3-get-article-summary","title":"3. Get Article Summary","text":"<pre><code>curl \"http://localhost:8000/api/process/?link=https://en.wikipedia.org/wiki/Python&amp;option=2\"\n</code></pre>"},{"location":"setup_guide/#basic-configuration","title":"\ud83d\udd27 Basic Configuration","text":"<p>Create a <code>.env</code> file for basic configuration:</p> <pre><code>DEBUG=True\nSECRET_KEY=your-development-key-here\nALLOWED_HOSTS=localhost,127.0.0.1\nLOG_LEVEL=INFO\nWIKI_USER_AGENT=Chakshu/1.0 (your-email@example.com)\n</code></pre>"},{"location":"setup_guide/#docker-quick-start","title":"\ud83d\udc33 Docker Quick Start","text":"<p>Prefer Docker? Use this one-liner:</p> <pre><code>git clone https://github.com/DhruvGoyal375/chakshu.git\ncd chakshu\ndocker-compose up --build\n</code></pre> <p>This starts: - Chakshu API on port 8000 - Ollama AI service on port 11434 - LaTeX service on port 3000</p>"},{"location":"setup_guide/#api-usage-examples","title":"\ud83d\udcda API Usage Examples","text":""},{"location":"setup_guide/#search-wikipedia-articles","title":"Search Wikipedia Articles","text":"<pre><code># Search for articles about Italy\ncurl \"http://localhost:8000/api/search/?q=Italy\"\n</code></pre> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Select the article you want to read\",\n  \"results\": [\n    {\n      \"id\": 1,\n      \"url\": \"https://en.wikipedia.org/wiki/Italy\",\n      \"title\": \"Italy\",\n      \"short_description\": \"Country in Southern Europe\"\n    }\n  ],\n  \"query\": \"Italy\",\n  \"result_count\": 1\n}\n</code></pre></p>"},{"location":"setup_guide/#get-processing-options","title":"Get Processing Options","text":"<pre><code># Get available options for an article\ncurl \"http://localhost:8000/api/select/?link=https://en.wikipedia.org/wiki/Italy\"\n</code></pre> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Select an option\",\n  \"options\": [\n    {\"id\": 1, \"description\": \"Read short description of the page\"},\n    {\"id\": 2, \"description\": \"Read summary of the page\"},\n    {\"id\": 3, \"description\": \"Read the full page content\"},\n    {\"id\": 4, \"description\": \"Read captions of images on the page\"},\n    {\"id\": 5, \"description\": \"Read tables on the page\"},\n    {\"id\": 6, \"description\": \"Read references and citations on the page\"}\n  ],\n  \"article_url\": \"https://en.wikipedia.org/wiki/Italy\",\n  \"article_title\": \"Italy\"\n}\n</code></pre></p>"},{"location":"setup_guide/#process-content","title":"Process Content","text":"<pre><code># Get article summary (option 2)\ncurl \"http://localhost:8000/api/process/?link=https://en.wikipedia.org/wiki/Italy&amp;option=2\"\n</code></pre>"},{"location":"setup_guide/#content-processing-options","title":"\ud83c\udfaf Content Processing Options","text":"Option Description Use Case 1 Short description Quick overview 2 Page summary Detailed introduction 3 Full content Complete article 4 Image captions Visual content descriptions 5 Table analysis Data and statistics 6 References Citations and sources"},{"location":"setup_guide/#whats-next","title":"\ud83d\udd0d What's Next?","text":"<p>Now that Chakshu is running, explore these features:</p>"},{"location":"setup_guide/#for-users","title":"For Users:","text":"<ul> <li>API Documentation - Complete API reference</li> <li>Features Overview - Learn about accessibility features</li> </ul>"},{"location":"setup_guide/#for-developers","title":"For Developers:","text":"<ul> <li>Full Installation Guide - Production setup</li> <li>Architecture Overview - Technical deep dive</li> <li>Contributing Guide - Join the development</li> </ul>"},{"location":"setup_guide/#for-advanced-setup","title":"For Advanced Setup:","text":"<ul> <li>AI Features Setup - Enable image captioning</li> <li>Docker Deployment - Production deployment</li> <li>Configuration Guide - Advanced settings</li> </ul>"},{"location":"setup_guide/#need-help","title":"\ud83c\udd98 Need Help?","text":"<p>Common Issues: - Port 8000 in use? Try <code>python chakshu/manage.py runserver 8001</code> - Poetry not found? Install with <code>curl -sSL https://install.python-poetry.org | python3 -</code> - Python version issues? Ensure you have Python 3.10+</p> <p>Get Support: - \ud83d\udcd6 Troubleshooting Guide - \ud83d\udc1b Report Issues - \ud83d\udcac Community Discussions</p> <p>Ready to make Wikipedia more accessible? Let's get started! \ud83c\udf1f</p>"},{"location":"api/","title":"API Documentation","text":"<p>Chakshu provides a simple yet powerful REST API for accessing Wikipedia content in an accessibility-focused format. The API is designed to work seamlessly with screen readers and text-to-speech systems.</p>"},{"location":"api/#api-overview","title":"API Overview","text":"<p>The Chakshu API follows a three-step workflow:</p> <ol> <li>Search - Find Wikipedia articles matching your query</li> <li>Select - Choose an article and see available processing options</li> <li>Process - Extract specific content types from the selected article</li> </ol>"},{"location":"api/#base-url","title":"Base URL","text":"<pre><code>http://localhost:8000/api/\n</code></pre> <p>For production deployments, replace <code>localhost:8000</code> with your domain.</p>"},{"location":"api/#authentication","title":"Authentication","text":"<p>Currently, Chakshu API does not require authentication. All endpoints are publicly accessible.</p> <p>Rate Limiting</p> <p>The API includes rate limiting to prevent abuse. Default limits are 5 requests per minute per IP address for certain endpoints.</p>"},{"location":"api/#quick-start","title":"Quick Start","text":"<p>Here's a complete example of using the API:</p> <pre><code># 1. Search for articles about Python\ncurl \"http://localhost:8000/api/search/?q=Python\"\n\n# 2. Select the first result and get options\ncurl \"http://localhost:8000/api/select/?link=https://en.wikipedia.org/wiki/Python\"\n\n# 3. Get the article summary (option 2)\ncurl \"http://localhost:8000/api/process/?link=https://en.wikipedia.org/wiki/Python&amp;option=2\"\n</code></pre>"},{"location":"api/#api-endpoints","title":"API Endpoints","text":""},{"location":"api/#core-endpoints","title":"Core Endpoints","text":"Endpoint Method Purpose <code>/search/</code> GET Search Wikipedia articles <code>/select/</code> GET Get processing options for an article <code>/process/</code> GET Extract specific content from an article"},{"location":"api/#content-processing-options","title":"Content Processing Options","text":"<p>When you call the <code>/process/</code> endpoint, you can specify one of these options:</p> Option Content Type Description 1 Short Description Brief article overview 2 Summary Detailed Wikipedia summary 3 Full Content Complete article text 4 Image Captions AI-generated image descriptions 5 Table Analysis Screen-reader friendly table descriptions 6 References Citations and bibliography"},{"location":"api/#response-format","title":"Response Format","text":"<p>All API responses follow a consistent JSON structure:</p> <pre><code>{\n  \"status\": \"success|error\",\n  \"message\": \"Human-readable message\",\n  \"data\": \"Response-specific data\",\n  // Additional fields based on endpoint\n}\n</code></pre>"},{"location":"api/#success-response","title":"Success Response","text":"<pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Operation completed successfully\",\n  // Endpoint-specific data fields\n}\n</code></pre>"},{"location":"api/#error-response","title":"Error Response","text":"<pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Description of what went wrong\",\n  \"error_code\": \"OPTIONAL_ERROR_CODE\"\n}\n</code></pre>"},{"location":"api/#content-types","title":"Content Types","text":""},{"location":"api/#text-content","title":"Text Content","text":"<p>Most endpoints return structured text optimized for screen readers:</p> <ul> <li>Headings are clearly marked with \"Heading:\" prefix</li> <li>Paragraphs are separated with proper spacing</li> <li>Lists are formatted with clear item separation</li> <li>Mathematical content is converted to readable text</li> </ul>"},{"location":"api/#image-captions","title":"Image Captions","text":"<p>AI-generated image descriptions include:</p> <ul> <li>Detailed visual descriptions of the image content</li> <li>Context information from Wikipedia metadata</li> <li>Accessibility-focused language suitable for screen readers</li> </ul>"},{"location":"api/#table-analysis","title":"Table Analysis","text":"<p>Complex Wikipedia tables are converted to:</p> <ul> <li>Structured descriptions of table purpose and content</li> <li>Row-by-row data in readable format</li> <li>Column header information for context</li> </ul>"},{"location":"api/#error-handling","title":"Error Handling","text":"<p>The API includes comprehensive error handling:</p>"},{"location":"api/#common-http-status-codes","title":"Common HTTP Status Codes","text":"Code Meaning Description 200 OK Request successful 400 Bad Request Invalid parameters or malformed request 404 Not Found Resource not found 429 Too Many Requests Rate limit exceeded 500 Internal Server Error Server-side error 503 Service Unavailable External service unavailable"},{"location":"api/#error-response-examples","title":"Error Response Examples","text":"<p>Invalid URL Format: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Invalid Wikipedia URL format. Must be a full 'https://en.wikipedia.org/wiki/...' URL.\"\n}\n</code></pre></p> <p>Missing Required Parameter: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Missing required parameter: q\"\n}\n</code></pre></p> <p>Rate Limit Exceeded: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Rate limit exceeded. Please try again later.\"\n}\n</code></pre></p>"},{"location":"api/#performance-considerations","title":"Performance Considerations","text":""},{"location":"api/#caching","title":"Caching","text":"<ul> <li>Search results are cached for 1 hour</li> <li>Processed content is cached for 1 hour</li> <li>Image captions are cached indefinitely (until updated)</li> </ul>"},{"location":"api/#parallel-processing","title":"Parallel Processing","text":"<ul> <li>Image processing uses parallel workers for better performance</li> <li>Multiple content types can be processed simultaneously</li> <li>Timeouts prevent long-running requests from blocking the service</li> </ul>"},{"location":"api/#response-times","title":"Response Times","text":"<p>Typical response times:</p> Endpoint Expected Time Notes Search &lt; 2 seconds Depends on Google Search API Select &lt; 500ms Cached after first request Process (text) &lt; 3 seconds Depends on article length Process (images) 10-30 seconds AI processing required Process (tables) 15-45 seconds Screenshot + AI analysis"},{"location":"api/#best-practices","title":"Best Practices","text":""},{"location":"api/#for-client-applications","title":"For Client Applications","text":"<ol> <li>Handle Async Operations: Image and table processing can take time</li> <li>Implement Retry Logic: For network errors and timeouts</li> <li>Cache Responses: Avoid repeated requests for the same content</li> <li>Show Progress Indicators: For long-running operations</li> <li>Validate URLs: Ensure Wikipedia URLs before sending to API</li> </ol>"},{"location":"api/#for-screen-reader-integration","title":"For Screen Reader Integration","text":"<ol> <li>Use Structured Content: Leverage the heading hierarchy in responses</li> <li>Announce Loading States: Inform users when processing is happening</li> <li>Handle Long Content: Break up long responses for better navigation</li> <li>Provide Skip Options: Allow users to skip to different content sections</li> </ol>"},{"location":"api/#example-client-code","title":"Example Client Code","text":"<p>JavaScript/Fetch Example: <pre><code>async function searchWikipedia(query) {\n  try {\n    const response = await fetch(`/api/search/?q=${encodeURIComponent(query)}`);\n    const data = await response.json();\n\n    if (data.status === 'success') {\n      return data.results;\n    } else {\n      throw new Error(data.message);\n    }\n  } catch (error) {\n    console.error('Search failed:', error);\n    throw error;\n  }\n}\n\nasync function getImageCaptions(articleUrl) {\n  try {\n    const response = await fetch(`/api/process/?link=${encodeURIComponent(articleUrl)}&amp;option=4`);\n    const data = await response.json();\n\n    if (data.status === 'success') {\n      return data.content;\n    } else {\n      throw new Error(data.message);\n    }\n  } catch (error) {\n    console.error('Image caption processing failed:', error);\n    throw error;\n  }\n}\n</code></pre></p> <p>Python/Requests Example: <pre><code>import requests\nfrom urllib.parse import quote\n\ndef search_wikipedia(query):\n    \"\"\"Search for Wikipedia articles.\"\"\"\n    url = f\"http://localhost:8000/api/search/?q={quote(query)}\"\n\n    try:\n        response = requests.get(url, timeout=10)\n        response.raise_for_status()\n        data = response.json()\n\n        if data['status'] == 'success':\n            return data['results']\n        else:\n            raise Exception(data['message'])\n\n    except requests.RequestException as e:\n        print(f\"Search failed: {e}\")\n        raise\n\ndef get_article_summary(article_url):\n    \"\"\"Get article summary.\"\"\"\n    url = f\"http://localhost:8000/api/process/?link={quote(article_url)}&amp;option=2\"\n\n    try:\n        response = requests.get(url, timeout=30)\n        response.raise_for_status()\n        data = response.json()\n\n        if data['status'] == 'success':\n            return data['content']\n        else:\n            raise Exception(data['message'])\n\n    except requests.RequestException as e:\n        print(f\"Summary processing failed: {e}\")\n        raise\n</code></pre></p>"},{"location":"api/#next-steps","title":"Next Steps","text":"<ul> <li>Search API - Detailed search endpoint documentation</li> <li>Processing API - Content processing endpoints</li> <li>Response Examples - Complete response examples</li> <li>Error Handling - Comprehensive error reference</li> </ul>"},{"location":"api/error_handling/","title":"Error Handling","text":"<p>This guide provides comprehensive information about error handling in the Chakshu API, including error types, response formats, and best practices for handling errors in client applications.</p>"},{"location":"api/error_handling/#error-response-format","title":"Error Response Format","text":"<p>All API errors follow a consistent JSON structure:</p> <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Human-readable error description\",\n  \"error_code\": \"OPTIONAL_ERROR_CODE\"\n}\n</code></pre>"},{"location":"api/error_handling/#response-fields","title":"Response Fields","text":"Field Type Required Description <code>status</code> string Yes Always \"error\" for error responses <code>message</code> string Yes Human-readable error description <code>error_code</code> string No Machine-readable error code (when applicable)"},{"location":"api/error_handling/#http-status-codes","title":"HTTP Status Codes","text":"<p>Chakshu API uses standard HTTP status codes to indicate the type of error:</p> Code Status Description When It Occurs 400 Bad Request Invalid request parameters Missing/invalid parameters, malformed URLs 404 Not Found Resource not found Invalid endpoints, non-existent articles 429 Too Many Requests Rate limit exceeded Too many requests from same IP 500 Internal Server Error Server-side error Unexpected server errors 503 Service Unavailable External service unavailable AI services down, Wikipedia unavailable"},{"location":"api/error_handling/#error-categories","title":"Error Categories","text":""},{"location":"api/error_handling/#1-parameter-validation-errors","title":"1. Parameter Validation Errors","text":"<p>These errors occur when request parameters are missing, invalid, or malformed.</p>"},{"location":"api/error_handling/#missing-required-parameters","title":"Missing Required Parameters","text":"<p>Scenario: Required parameter not provided</p> <p>Example Request: <pre><code>curl \"http://localhost:8000/api/search/\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Missing required parameter: q\"\n}\n</code></pre></p> <p>HTTP Status: 400 Bad Request</p>"},{"location":"api/error_handling/#parameter-too-long","title":"Parameter Too Long","text":"<p>Scenario: Parameter exceeds maximum length</p> <p>Example Request: <pre><code>curl \"http://localhost:8000/api/search/?q=very_long_query_that_exceeds_255_characters...\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"q is too long (max 255 characters)\"\n}\n</code></pre></p> <p>HTTP Status: 400 Bad Request</p>"},{"location":"api/error_handling/#invalid-url-format","title":"Invalid URL Format","text":"<p>Scenario: Wikipedia URL doesn't match required format</p> <p>Example Request: <pre><code>curl \"http://localhost:8000/api/select/?link=https://example.com/invalid\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Invalid Wikipedia URL format. Must be a full 'https://en.wikipedia.org/wiki/...' URL.\"\n}\n</code></pre></p> <p>HTTP Status: 400 Bad Request</p>"},{"location":"api/error_handling/#invalid-option-value","title":"Invalid Option Value","text":"<p>Scenario: Processing option is not in valid range (1-6)</p> <p>Example Request: <pre><code>curl \"http://localhost:8000/api/process/?link=https://en.wikipedia.org/wiki/Python&amp;option=7\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Invalid option. Please select a valid option (1-6).\"\n}\n</code></pre></p> <p>HTTP Status: 400 Bad Request</p>"},{"location":"api/error_handling/#2-rate-limiting-errors","title":"2. Rate Limiting Errors","text":"<p>These errors occur when the API rate limits are exceeded.</p>"},{"location":"api/error_handling/#rate-limit-exceeded","title":"Rate Limit Exceeded","text":"<p>Scenario: Too many requests from the same IP address</p> <p>Response: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Rate limit exceeded. Please try again later.\",\n  \"error_code\": \"RATE_LIMIT_EXCEEDED\"\n}\n</code></pre></p> <p>HTTP Status: 429 Too Many Requests</p> <p>Headers: <pre><code>Retry-After: 60\nX-RateLimit-Limit: 5\nX-RateLimit-Remaining: 0\nX-RateLimit-Reset: 1640995200\n</code></pre></p>"},{"location":"api/error_handling/#3-external-service-errors","title":"3. External Service Errors","text":"<p>These errors occur when external services (AI models, Wikipedia, etc.) are unavailable.</p>"},{"location":"api/error_handling/#ai-service-unavailable","title":"AI Service Unavailable","text":"<p>Scenario: Ollama or image captioning service is down</p> <p>Response: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Failed to connect to external services.\",\n  \"error_code\": \"SERVICE_UNAVAILABLE\"\n}\n</code></pre></p> <p>HTTP Status: 503 Service Unavailable</p>"},{"location":"api/error_handling/#wikipedia-api-error","title":"Wikipedia API Error","text":"<p>Scenario: Wikipedia API is unavailable or returns errors</p> <p>Response: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Failed to fetch content from Wikipedia.\",\n  \"error_code\": \"WIKIPEDIA_UNAVAILABLE\"\n}\n</code></pre></p> <p>HTTP Status: 503 Service Unavailable</p>"},{"location":"api/error_handling/#latex-service-error","title":"LaTeX Service Error","text":"<p>Scenario: LaTeX-to-text conversion service is unavailable</p> <p>Response: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Mathematical content processing unavailable.\",\n  \"error_code\": \"LATEX_SERVICE_UNAVAILABLE\"\n}\n</code></pre></p> <p>HTTP Status: 503 Service Unavailable</p>"},{"location":"api/error_handling/#4-content-processing-errors","title":"4. Content Processing Errors","text":"<p>These errors occur during content processing operations.</p>"},{"location":"api/error_handling/#no-content-found","title":"No Content Found","text":"<p>Scenario: Article exists but has no processable content</p> <p>Response: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"No processable content found for the requested option.\",\n  \"error_code\": \"NO_CONTENT\"\n}\n</code></pre></p> <p>HTTP Status: 404 Not Found</p>"},{"location":"api/error_handling/#processing-timeout","title":"Processing Timeout","text":"<p>Scenario: Content processing takes too long</p> <p>Response: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Content processing timed out. Please try again.\",\n  \"error_code\": \"PROCESSING_TIMEOUT\"\n}\n</code></pre></p> <p>HTTP Status: 500 Internal Server Error</p>"},{"location":"api/error_handling/#partial-processing-failure","title":"Partial Processing Failure","text":"<p>Scenario: Some content processed successfully, others failed</p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"type\": \"image_captions\",\n  \"content\": [\n    {\n      \"image_url\": \"https://example.com/image1.jpg\",\n      \"final_caption\": \"Successfully processed image\"\n    }\n  ],\n  \"article_url\": \"https://en.wikipedia.org/wiki/Article\",\n  \"article_title\": \"Article\",\n  \"image_count\": 1,\n  \"processing_warnings\": [\n    \"Failed to process 2 images due to service unavailability\"\n  ]\n}\n</code></pre></p> <p>Note: This is still a success response, but includes warnings about partial failures.</p>"},{"location":"api/error_handling/#5-server-errors","title":"5. Server Errors","text":"<p>These are unexpected server-side errors.</p>"},{"location":"api/error_handling/#internal-server-error","title":"Internal Server Error","text":"<p>Scenario: Unexpected server-side error</p> <p>Response: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"An internal server error occurred. Please try again later.\",\n  \"error_code\": \"INTERNAL_ERROR\"\n}\n</code></pre></p> <p>HTTP Status: 500 Internal Server Error</p>"},{"location":"api/error_handling/#error-handling-best-practices","title":"Error Handling Best Practices","text":""},{"location":"api/error_handling/#1-client-side-error-handling","title":"1. Client-Side Error Handling","text":""},{"location":"api/error_handling/#javascript-example","title":"JavaScript Example","text":"<pre><code>class ChakshuAPIError extends Error {\n  constructor(message, status, errorCode) {\n    super(message);\n    this.name = 'ChakshuAPIError';\n    this.status = status;\n    this.errorCode = errorCode;\n  }\n}\n\nasync function makeAPIRequest(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (data.status === 'error') {\n      throw new ChakshuAPIError(\n        data.message, \n        response.status, \n        data.error_code\n      );\n    }\n\n    return data;\n  } catch (error) {\n    if (error instanceof ChakshuAPIError) {\n      handleAPIError(error);\n    } else {\n      handleNetworkError(error);\n    }\n    throw error;\n  }\n}\n\nfunction handleAPIError(error) {\n  switch (error.status) {\n    case 400:\n      console.error('Invalid request:', error.message);\n      // Show user-friendly validation error\n      break;\n    case 429:\n      console.error('Rate limited:', error.message);\n      // Implement retry with backoff\n      break;\n    case 503:\n      console.error('Service unavailable:', error.message);\n      // Show service unavailable message\n      break;\n    default:\n      console.error('API error:', error.message);\n  }\n}\n\nfunction handleNetworkError(error) {\n  console.error('Network error:', error);\n  // Show network connectivity error\n}\n</code></pre>"},{"location":"api/error_handling/#python-example","title":"Python Example","text":"<pre><code>import requests\nimport time\nfrom typing import Optional\n\nclass ChakshuAPIError(Exception):\n    def __init__(self, message: str, status_code: int, error_code: Optional[str] = None):\n        super().__init__(message)\n        self.status_code = status_code\n        self.error_code = error_code\n\nclass ChakshuClient:\n    def __init__(self, base_url: str, max_retries: int = 3):\n        self.base_url = base_url\n        self.max_retries = max_retries\n        self.session = requests.Session()\n\n    def _make_request(self, endpoint: str, params: dict) -&gt; dict:\n        url = f\"{self.base_url}/{endpoint}/\"\n\n        for attempt in range(self.max_retries):\n            try:\n                response = self.session.get(url, params=params, timeout=30)\n                data = response.json()\n\n                if data.get('status') == 'error':\n                    raise ChakshuAPIError(\n                        data['message'], \n                        response.status_code, \n                        data.get('error_code')\n                    )\n\n                return data\n\n            except requests.exceptions.Timeout:\n                if attempt == self.max_retries - 1:\n                    raise ChakshuAPIError(\"Request timed out\", 408)\n                time.sleep(2 ** attempt)  # Exponential backoff\n\n            except requests.exceptions.ConnectionError:\n                if attempt == self.max_retries - 1:\n                    raise ChakshuAPIError(\"Connection failed\", 503)\n                time.sleep(2 ** attempt)\n\n            except ChakshuAPIError as e:\n                if e.status_code == 429:  # Rate limited\n                    retry_after = response.headers.get('Retry-After', 60)\n                    time.sleep(int(retry_after))\n                    continue\n                raise\n\n        raise ChakshuAPIError(\"Max retries exceeded\", 500)\n\n    def search(self, query: str) -&gt; dict:\n        try:\n            return self._make_request('search', {'q': query})\n        except ChakshuAPIError as e:\n            self._handle_error(e, 'search')\n            raise\n\n    def _handle_error(self, error: ChakshuAPIError, operation: str):\n        if error.status_code == 400:\n            print(f\"Invalid {operation} request: {error}\")\n        elif error.status_code == 429:\n            print(f\"Rate limited during {operation}: {error}\")\n        elif error.status_code == 503:\n            print(f\"Service unavailable during {operation}: {error}\")\n        else:\n            print(f\"Unexpected error during {operation}: {error}\")\n</code></pre>"},{"location":"api/error_handling/#2-retry-strategies","title":"2. Retry Strategies","text":""},{"location":"api/error_handling/#exponential-backoff","title":"Exponential Backoff","text":"<pre><code>async function retryWithBackoff(fn, maxRetries = 3) {\n  for (let attempt = 1; attempt &lt;= maxRetries; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      if (attempt === maxRetries) throw error;\n\n      const delay = Math.min(1000 * Math.pow(2, attempt), 30000);\n      console.log(`Attempt ${attempt} failed, retrying in ${delay}ms...`);\n      await new Promise(resolve =&gt; setTimeout(resolve, delay));\n    }\n  }\n}\n\n// Usage\nconst result = await retryWithBackoff(async () =&gt; {\n  return await fetch('/api/search/?q=Python');\n});\n</code></pre>"},{"location":"api/error_handling/#rate-limit-handling","title":"Rate Limit Handling","text":"<pre><code>async function handleRateLimit(response) {\n  if (response.status === 429) {\n    const retryAfter = response.headers.get('Retry-After') || 60;\n    console.log(`Rate limited. Waiting ${retryAfter} seconds...`);\n    await new Promise(resolve =&gt; setTimeout(resolve, retryAfter * 1000));\n    return true; // Indicate retry should happen\n  }\n  return false;\n}\n</code></pre>"},{"location":"api/error_handling/#3-user-experience-considerations","title":"3. User Experience Considerations","text":""},{"location":"api/error_handling/#error-messages-for-users","title":"Error Messages for Users","text":"<pre><code>function getUserFriendlyError(error) {\n  const errorMessages = {\n    'RATE_LIMIT_EXCEEDED': 'Too many requests. Please wait a moment and try again.',\n    'SERVICE_UNAVAILABLE': 'The service is temporarily unavailable. Please try again later.',\n    'WIKIPEDIA_UNAVAILABLE': 'Wikipedia is currently unavailable. Please try again later.',\n    'NO_CONTENT': 'No content available for this article and option.',\n    'PROCESSING_TIMEOUT': 'Processing is taking longer than expected. Please try again.',\n    'INVALID_URL': 'Please provide a valid Wikipedia article URL.',\n    'MISSING_PARAMETER': 'Please provide all required information.'\n  };\n\n  return errorMessages[error.error_code] || 'An unexpected error occurred. Please try again.';\n}\n</code></pre>"},{"location":"api/error_handling/#progress-indicators","title":"Progress Indicators","text":"<pre><code>async function processWithProgress(articleUrl, option) {\n  const progressElement = document.getElementById('progress');\n\n  try {\n    progressElement.textContent = 'Starting processing...';\n\n    const result = await fetch(`/api/process/?link=${encodeURIComponent(articleUrl)}&amp;option=${option}`);\n    const data = await result.json();\n\n    if (data.status === 'error') {\n      progressElement.textContent = getUserFriendlyError(data);\n      return null;\n    }\n\n    progressElement.textContent = 'Processing complete!';\n    return data;\n\n  } catch (error) {\n    progressElement.textContent = 'Processing failed. Please try again.';\n    throw error;\n  }\n}\n</code></pre>"},{"location":"api/error_handling/#4-logging-and-monitoring","title":"4. Logging and Monitoring","text":""},{"location":"api/error_handling/#client-side-error-logging","title":"Client-Side Error Logging","text":"<pre><code>function logError(error, context) {\n  const errorLog = {\n    timestamp: new Date().toISOString(),\n    error: {\n      message: error.message,\n      status: error.status,\n      errorCode: error.errorCode\n    },\n    context: context,\n    userAgent: navigator.userAgent,\n    url: window.location.href\n  };\n\n  // Send to logging service\n  console.error('Chakshu API Error:', errorLog);\n\n  // Optional: Send to external logging service\n  // sendToLoggingService(errorLog);\n}\n</code></pre>"},{"location":"api/error_handling/#server-side-error-monitoring","title":"Server-Side Error Monitoring","text":"<p>Monitor these error patterns: - High rate of 429 errors (may need rate limit adjustment) - Frequent 503 errors (external service issues) - Spike in 500 errors (server problems) - Unusual error patterns (potential attacks)</p>"},{"location":"api/error_handling/#testing-error-scenarios","title":"Testing Error Scenarios","text":""},{"location":"api/error_handling/#manual-testing","title":"Manual Testing","text":"<pre><code># Test missing parameter\ncurl \"http://localhost:8000/api/search/\"\n\n# Test invalid URL\ncurl \"http://localhost:8000/api/select/?link=invalid-url\"\n\n# Test invalid option\ncurl \"http://localhost:8000/api/process/?link=https://en.wikipedia.org/wiki/Python&amp;option=10\"\n\n# Test rate limiting (make multiple rapid requests)\nfor i in {1..10}; do\n  curl \"http://localhost:8000/api/search/?q=test$i\" &amp;\ndone\n</code></pre>"},{"location":"api/error_handling/#automated-testing","title":"Automated Testing","text":"<pre><code>import pytest\nimport requests\n\ndef test_missing_parameter():\n    response = requests.get('http://localhost:8000/api/search/')\n    assert response.status_code == 400\n    data = response.json()\n    assert data['status'] == 'error'\n    assert 'Missing required parameter' in data['message']\n\ndef test_invalid_url():\n    response = requests.get('http://localhost:8000/api/select/?link=invalid')\n    assert response.status_code == 400\n    data = response.json()\n    assert data['status'] == 'error'\n    assert 'Invalid Wikipedia URL format' in data['message']\n\ndef test_invalid_option():\n    url = 'http://localhost:8000/api/process/?link=https://en.wikipedia.org/wiki/Python&amp;option=10'\n    response = requests.get(url)\n    assert response.status_code == 400\n    data = response.json()\n    assert data['status'] == 'error'\n    assert 'Invalid option' in data['message']\n</code></pre>"},{"location":"api/error_handling/#error-recovery-strategies","title":"Error Recovery Strategies","text":""},{"location":"api/error_handling/#graceful-degradation","title":"Graceful Degradation","text":"<pre><code>async function getArticleContent(articleUrl) {\n  try {\n    // Try to get full content with images\n    const fullContent = await processContent(articleUrl, 3);\n    const images = await processContent(articleUrl, 4);\n\n    return {\n      content: fullContent.content,\n      images: images.content,\n      hasImages: true\n    };\n  } catch (error) {\n    if (error.errorCode === 'SERVICE_UNAVAILABLE') {\n      // Fall back to text-only content\n      try {\n        const textContent = await processContent(articleUrl, 3);\n        return {\n          content: textContent.content,\n          images: [],\n          hasImages: false,\n          warning: 'Image processing unavailable'\n        };\n      } catch (textError) {\n        // Fall back to summary\n        const summary = await processContent(articleUrl, 2);\n        return {\n          content: summary.content,\n          images: [],\n          hasImages: false,\n          warning: 'Full content unavailable, showing summary'\n        };\n      }\n    }\n    throw error;\n  }\n}\n</code></pre>"},{"location":"api/error_handling/#circuit-breaker-pattern","title":"Circuit Breaker Pattern","text":"<pre><code>class CircuitBreaker {\n  constructor(threshold = 5, timeout = 60000) {\n    this.threshold = threshold;\n    this.timeout = timeout;\n    this.failureCount = 0;\n    this.lastFailureTime = null;\n    this.state = 'CLOSED'; // CLOSED, OPEN, HALF_OPEN\n  }\n\n  async call(fn) {\n    if (this.state === 'OPEN') {\n      if (Date.now() - this.lastFailureTime &gt; this.timeout) {\n        this.state = 'HALF_OPEN';\n      } else {\n        throw new Error('Circuit breaker is OPEN');\n      }\n    }\n\n    try {\n      const result = await fn();\n      this.onSuccess();\n      return result;\n    } catch (error) {\n      this.onFailure();\n      throw error;\n    }\n  }\n\n  onSuccess() {\n    this.failureCount = 0;\n    this.state = 'CLOSED';\n  }\n\n  onFailure() {\n    this.failureCount++;\n    this.lastFailureTime = Date.now();\n\n    if (this.failureCount &gt;= this.threshold) {\n      this.state = 'OPEN';\n    }\n  }\n}\n\n// Usage\nconst circuitBreaker = new CircuitBreaker();\n\nasync function safeAPICall(url) {\n  return await circuitBreaker.call(async () =&gt; {\n    const response = await fetch(url);\n    if (!response.ok) throw new Error(`HTTP ${response.status}`);\n    return await response.json();\n  });\n}\n</code></pre>"},{"location":"api/error_handling/#next-steps","title":"Next Steps","text":"<ul> <li>API Overview - Return to API documentation overview</li> <li>Response Examples - See complete response examples</li> <li>Features Documentation - Learn about accessibility features</li> </ul>"},{"location":"api/processing_api/","title":"Content Processing API","text":"<p>The Content Processing API consists of two endpoints that work together to extract and process Wikipedia article content in an accessibility-focused format.</p>"},{"location":"api/processing_api/#select-endpoint","title":"Select Endpoint","text":"<p>The Select endpoint provides available processing options for a chosen Wikipedia article.</p>"},{"location":"api/processing_api/#endpoint","title":"Endpoint","text":"<pre><code>GET /api/select/\n</code></pre>"},{"location":"api/processing_api/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>link</code> string Yes Full Wikipedia article URL"},{"location":"api/processing_api/#parameter-details","title":"Parameter Details","text":"<p>Link (<code>link</code>) - Format: Full Wikipedia URL - Pattern: <code>https://en.wikipedia.org/wiki/Article_Title</code> - Max Length: 500 characters - Validation: Must be a valid English Wikipedia URL</p>"},{"location":"api/processing_api/#request-examples","title":"Request Examples","text":"<pre><code># Basic select request\ncurl \"http://localhost:8000/api/select/?link=https://en.wikipedia.org/wiki/Python\"\n\n# URL-encoded link (recommended)\ncurl \"http://localhost:8000/api/select/?link=https%3A//en.wikipedia.org/wiki/Python\"\n</code></pre>"},{"location":"api/processing_api/#response-format","title":"Response Format","text":"<pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Select an option\",\n  \"options\": [\n    {\n      \"id\": 1,\n      \"description\": \"Read short description of the page\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Read summary of the page\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Read the full page content\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Read captions of images on the page\"\n    },\n    {\n      \"id\": 5,\n      \"description\": \"Read tables on the page\"\n    },\n    {\n      \"id\": 6,\n      \"description\": \"Read references and citations on the page\"\n    }\n  ],\n  \"article_url\": \"https://en.wikipedia.org/wiki/Python\",\n  \"article_title\": \"Python\"\n}\n</code></pre>"},{"location":"api/processing_api/#process-endpoint","title":"Process Endpoint","text":"<p>The Process endpoint extracts specific content types from Wikipedia articles based on the selected option.</p>"},{"location":"api/processing_api/#endpoint_1","title":"Endpoint","text":"<pre><code>GET /api/process/\n</code></pre>"},{"location":"api/processing_api/#parameters_1","title":"Parameters","text":"Parameter Type Required Description <code>link</code> string Yes Full Wikipedia article URL <code>option</code> integer Yes Processing option (1-6)"},{"location":"api/processing_api/#parameter-details_1","title":"Parameter Details","text":"<p>Link (<code>link</code>) - Same validation as Select endpoint</p> <p>Option (<code>option</code>) - Range: 1-6 - Type: Integer - Options:   - <code>1</code>: Short description   - <code>2</code>: Page summary   - <code>3</code>: Full content   - <code>4</code>: Image captions   - <code>5</code>: Table analysis   - <code>6</code>: References and citations</p>"},{"location":"api/processing_api/#request-examples_1","title":"Request Examples","text":"<pre><code># Get article summary (option 2)\ncurl \"http://localhost:8000/api/process/?link=https://en.wikipedia.org/wiki/Python&amp;option=2\"\n\n# Get image captions (option 4)\ncurl \"http://localhost:8000/api/process/?link=https://en.wikipedia.org/wiki/Python&amp;option=4\"\n\n# Get table analysis (option 5)\ncurl \"http://localhost:8000/api/process/?link=https://en.wikipedia.org/wiki/Python&amp;option=5\"\n</code></pre>"},{"location":"api/processing_api/#processing-options-detailed","title":"Processing Options Detailed","text":""},{"location":"api/processing_api/#option-1-short-description","title":"Option 1: Short Description","text":"<p>Returns a brief description of the Wikipedia article.</p> <p>Response Format: <pre><code>{\n  \"status\": \"success\",\n  \"type\": \"short_description\",\n  \"content\": \"Brief article description\",\n  \"article_url\": \"https://en.wikipedia.org/wiki/Article\",\n  \"article_title\": \"Article Title\"\n}\n</code></pre></p> <p>Use Cases: - Quick article overview - Search result previews - Navigation assistance</p>"},{"location":"api/processing_api/#option-2-page-summary","title":"Option 2: Page Summary","text":"<p>Returns the Wikipedia article summary (lead section).</p> <p>Response Format: <pre><code>{\n  \"status\": \"success\",\n  \"type\": \"summary\",\n  \"content\": \"Detailed article summary...\",\n  \"article_url\": \"https://en.wikipedia.org/wiki/Article\",\n  \"article_title\": \"Article Title\"\n}\n</code></pre></p> <p>Features: - Complete lead section content - Cleaned and formatted for screen readers - Mathematical content converted to readable text</p>"},{"location":"api/processing_api/#option-3-full-content","title":"Option 3: Full Content","text":"<p>Returns the complete article content with structured formatting.</p> <p>Response Format: <pre><code>{\n  \"status\": \"success\",\n  \"type\": \"full_content\",\n  \"content\": \"Heading: Introduction\\n\\nParagraph: Article content...\",\n  \"article_url\": \"https://en.wikipedia.org/wiki/Article\",\n  \"article_title\": \"Article Title\"\n}\n</code></pre></p> <p>Content Structure: - Headings: Prefixed with \"Heading: \" - Paragraphs: Prefixed with \"Paragraph: \" - Lists: Properly formatted list items - Mathematical Content: Converted to readable text - Chemical Formulas: Converted to spoken format</p>"},{"location":"api/processing_api/#option-4-image-captions","title":"Option 4: Image Captions","text":"<p>Returns AI-generated descriptions of all images on the page.</p> <p>Response Format: <pre><code>{\n  \"status\": \"success\",\n  \"type\": \"image_captions\",\n  \"content\": [\n    {\n      \"image_url\": \"https://upload.wikimedia.org/...\",\n      \"final_caption\": \"Detailed AI-generated description...\"\n    }\n  ],\n  \"article_url\": \"https://en.wikipedia.org/wiki/Article\",\n  \"article_title\": \"Article Title\",\n  \"image_count\": 5\n}\n</code></pre></p> <p>AI Features: - Context-Aware: Uses article title and existing captions for context - Detailed Descriptions: Comprehensive visual descriptions - Accessibility Focused: Optimized for screen readers - High Resolution: Processes highest available image quality</p> <p>Processing Time: 10-30 seconds depending on number of images</p>"},{"location":"api/processing_api/#option-5-table-analysis","title":"Option 5: Table Analysis","text":"<p>Returns screen-reader friendly descriptions of all tables on the page.</p> <p>Response Format: <pre><code>{\n  \"status\": \"success\",\n  \"type\": \"tables\",\n  \"content\": {\n    \"url\": \"https://en.wikipedia.org/wiki/Article\",\n    \"tables_found\": 3,\n    \"analyses\": [\n      {\n        \"success\": true,\n        \"analysis\": \"Detailed table description...\"\n      }\n    ],\n    \"successful_analyses\": 3,\n    \"failed_analyses\": 0\n  },\n  \"article_url\": \"https://en.wikipedia.org/wiki/Article\",\n  \"article_title\": \"Article Title\",\n  \"table_count\": 3\n}\n</code></pre></p> <p>Processing Method: - Screenshot Capture: Uses Playwright to capture table images - AI Analysis: Qwen2.5-VL model analyzes table structure and content - Accessibility Conversion: Converts visual tables to readable descriptions</p> <p>Processing Time: 15-45 seconds depending on number and complexity of tables</p>"},{"location":"api/processing_api/#option-6-references-and-citations","title":"Option 6: References and Citations","text":"<p>Returns all references and citations from the article.</p> <p>Response Format: <pre><code>{\n  \"status\": \"success\",\n  \"type\": \"citations\",\n  \"content\": [\n    \"Author, Title. Publication. Date.\",\n    \"Another citation...\"\n  ],\n  \"article_url\": \"https://en.wikipedia.org/wiki/Article\",\n  \"article_title\": \"Article Title\",\n  \"citation_count\": 25\n}\n</code></pre></p> <p>Features: - Complete Bibliography: All article references - Formatted Text: Ready for screen reader consumption - Source Information: Authors, titles, dates, and publications</p>"},{"location":"api/processing_api/#error-handling","title":"Error Handling","text":""},{"location":"api/processing_api/#invalid-url-format","title":"Invalid URL Format","text":"<p>Request: <pre><code>curl \"http://localhost:8000/api/select/?link=https://example.com/invalid\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Invalid Wikipedia URL format. Must be a full 'https://en.wikipedia.org/wiki/...' URL.\"\n}\n</code></pre></p>"},{"location":"api/processing_api/#missing-parameters","title":"Missing Parameters","text":"<p>Request: <pre><code>curl \"http://localhost:8000/api/process/?link=https://en.wikipedia.org/wiki/Python\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Missing required parameter: option\"\n}\n</code></pre></p>"},{"location":"api/processing_api/#invalid-option-value","title":"Invalid Option Value","text":"<p>Request: <pre><code>curl \"http://localhost:8000/api/process/?link=https://en.wikipedia.org/wiki/Python&amp;option=7\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Invalid option. Please select a valid option (1-6).\"\n}\n</code></pre></p>"},{"location":"api/processing_api/#service-unavailable","title":"Service Unavailable","text":"<p>When external AI services are unavailable:</p> <p>Response: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Failed to connect to external services.\"\n}\n</code></pre></p>"},{"location":"api/processing_api/#performance-and-caching","title":"Performance and Caching","text":""},{"location":"api/processing_api/#caching-strategy","title":"Caching Strategy","text":"<ul> <li>Text Content: Cached for 1 hour</li> <li>Image Captions: Cached indefinitely (until article changes)</li> <li>Table Analysis: Cached for 1 hour</li> <li>References: Cached for 1 hour</li> </ul>"},{"location":"api/processing_api/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Parallel Processing: Multiple images processed simultaneously</li> <li>Timeout Handling: Prevents long-running requests from blocking</li> <li>Graceful Degradation: Continues processing even if some operations fail</li> </ul>"},{"location":"api/processing_api/#expected-response-times","title":"Expected Response Times","text":"Option Content Type Typical Time Notes 1 Short Description &lt; 1 second Usually cached 2 Summary 1-3 seconds Text processing 3 Full Content 2-5 seconds Depends on article length 4 Image Captions 10-30 seconds AI processing required 5 Table Analysis 15-45 seconds Screenshot + AI analysis 6 References 1-3 seconds Text extraction"},{"location":"api/processing_api/#usage-examples","title":"Usage Examples","text":""},{"location":"api/processing_api/#complete-workflow-javascript","title":"Complete Workflow (JavaScript)","text":"<pre><code>class ChakshuClient {\n  constructor(baseUrl = 'http://localhost:8000/api') {\n    this.baseUrl = baseUrl;\n  }\n\n  async search(query) {\n    const response = await fetch(`${this.baseUrl}/search/?q=${encodeURIComponent(query)}`);\n    return await response.json();\n  }\n\n  async getOptions(articleUrl) {\n    const response = await fetch(`${this.baseUrl}/select/?link=${encodeURIComponent(articleUrl)}`);\n    return await response.json();\n  }\n\n  async processContent(articleUrl, option) {\n    const response = await fetch(`${this.baseUrl}/process/?link=${encodeURIComponent(articleUrl)}&amp;option=${option}`);\n    return await response.json();\n  }\n\n  async getArticleSummary(articleUrl) {\n    return await this.processContent(articleUrl, 2);\n  }\n\n  async getImageCaptions(articleUrl) {\n    return await this.processContent(articleUrl, 4);\n  }\n\n  async getTableAnalysis(articleUrl) {\n    return await this.processContent(articleUrl, 5);\n  }\n}\n\n// Usage example\nasync function demonstrateWorkflow() {\n  const client = new ChakshuClient();\n\n  try {\n    // 1. Search for articles\n    const searchResults = await client.search('Artificial Intelligence');\n    console.log(`Found ${searchResults.result_count} articles`);\n\n    if (searchResults.results.length &gt; 0) {\n      const firstArticle = searchResults.results[0];\n      console.log(`Selected: ${firstArticle.title}`);\n\n      // 2. Get processing options\n      const options = await client.getOptions(firstArticle.url);\n      console.log('Available options:', options.options);\n\n      // 3. Get article summary\n      const summary = await client.getArticleSummary(firstArticle.url);\n      console.log('Summary:', summary.content.substring(0, 200) + '...');\n\n      // 4. Get image captions (if needed)\n      const images = await client.getImageCaptions(firstArticle.url);\n      console.log(`Found ${images.image_count} images with captions`);\n    }\n  } catch (error) {\n    console.error('Workflow failed:', error);\n  }\n}\n</code></pre>"},{"location":"api/processing_api/#python-client-example","title":"Python Client Example","text":"<pre><code>import requests\nfrom urllib.parse import quote\nimport time\n\nclass ChakshuClient:\n    def __init__(self, base_url='http://localhost:8000/api'):\n        self.base_url = base_url\n        self.session = requests.Session()\n        self.session.timeout = 30\n\n    def search(self, query):\n        \"\"\"Search for Wikipedia articles.\"\"\"\n        url = f\"{self.base_url}/search/?q={quote(query)}\"\n        response = self.session.get(url)\n        response.raise_for_status()\n        return response.json()\n\n    def get_options(self, article_url):\n        \"\"\"Get processing options for an article.\"\"\"\n        url = f\"{self.base_url}/select/?link={quote(article_url)}\"\n        response = self.session.get(url)\n        response.raise_for_status()\n        return response.json()\n\n    def process_content(self, article_url, option):\n        \"\"\"Process article content with specified option.\"\"\"\n        url = f\"{self.base_url}/process/?link={quote(article_url)}&amp;option={option}\"\n\n        # Longer timeout for AI processing\n        timeout = 60 if option in [4, 5] else 30\n        response = self.session.get(url, timeout=timeout)\n        response.raise_for_status()\n        return response.json()\n\n    def get_summary(self, article_url):\n        \"\"\"Get article summary.\"\"\"\n        return self.process_content(article_url, 2)\n\n    def get_image_captions(self, article_url):\n        \"\"\"Get AI-generated image captions.\"\"\"\n        return self.process_content(article_url, 4)\n\n    def get_table_analysis(self, article_url):\n        \"\"\"Get table analysis.\"\"\"\n        return self.process_content(article_url, 5)\n\n# Usage example\ndef main():\n    client = ChakshuClient()\n\n    try:\n        # Search for articles\n        results = client.search('Machine Learning')\n        print(f\"Found {results['result_count']} articles\")\n\n        if results['results']:\n            article = results['results'][0]\n            print(f\"Processing: {article['title']}\")\n\n            # Get summary\n            summary = client.get_summary(article['url'])\n            print(f\"Summary length: {len(summary['content'])} characters\")\n\n            # Get image captions (this may take a while)\n            print(\"Processing images...\")\n            images = client.get_image_captions(article['url'])\n            print(f\"Generated captions for {images['image_count']} images\")\n\n    except requests.RequestException as e:\n        print(f\"API request failed: {e}\")\n    except Exception as e:\n        print(f\"Error: {e}\")\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"api/processing_api/#best-practices","title":"Best Practices","text":""},{"location":"api/processing_api/#for-client-applications","title":"For Client Applications","text":"<ol> <li>Handle Long Operations: Options 4 and 5 can take significant time</li> <li>Implement Progress Indicators: Show users that processing is happening</li> <li>Cache Responses: Avoid repeated requests for the same content</li> <li>Validate URLs: Ensure Wikipedia URLs before sending to API</li> <li>Handle Errors Gracefully: Provide meaningful error messages to users</li> </ol>"},{"location":"api/processing_api/#for-screen-reader-integration","title":"For Screen Reader Integration","text":"<ol> <li>Announce Processing: Inform users when long operations are starting</li> <li>Structure Content: Use the heading hierarchy in full content responses</li> <li>Break Up Long Content: Allow navigation through large responses</li> <li>Provide Summaries: Offer content length information before reading</li> </ol>"},{"location":"api/processing_api/#error-handling_1","title":"Error Handling","text":"<pre><code>async function robustProcessing(articleUrl, option) {\n  const maxRetries = 3;\n  let lastError;\n\n  for (let attempt = 1; attempt &lt;= maxRetries; attempt++) {\n    try {\n      const result = await processContent(articleUrl, option);\n\n      if (result.status === 'success') {\n        return result;\n      } else {\n        throw new Error(result.message);\n      }\n    } catch (error) {\n      lastError = error;\n\n      if (attempt &lt; maxRetries) {\n        const delay = Math.pow(2, attempt) * 1000; // Exponential backoff\n        console.log(`Attempt ${attempt} failed, retrying in ${delay}ms...`);\n        await new Promise(resolve =&gt; setTimeout(resolve, delay));\n      }\n    }\n  }\n\n  throw lastError;\n}\n</code></pre>"},{"location":"api/processing_api/#next-steps","title":"Next Steps","text":"<ul> <li>Response Examples - See complete response examples for all options</li> <li>Error Handling - Comprehensive error handling guide</li> <li>Features Documentation - Learn about accessibility features</li> </ul>"},{"location":"api/response_examples/","title":"API Response Examples","text":"<p>This page provides complete examples of API responses for all endpoints and content types. These examples are based on real API responses and demonstrate the structure and content you can expect.</p>"},{"location":"api/response_examples/#search-api-examples","title":"Search API Examples","text":""},{"location":"api/response_examples/#basic-search-query","title":"Basic Search Query","text":"<p>Request: <pre><code>curl \"http://localhost:8000/api/search/?q=Italy\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Select the article you want to read\",\n  \"results\": [\n    {\n      \"id\": 1,\n      \"url\": \"https://en.wikipedia.org/wiki/Italy\",\n      \"title\": \"Italy\",\n      \"short_description\": \"Country in Southern Europe\"\n    },\n    {\n      \"id\": 2,\n      \"url\": \"https://en.wikipedia.org/wiki/Kingdom_of_Italy\",\n      \"title\": \"Kingdom of Italy\",\n      \"short_description\": \"Country in Southern Europe (1861\u20131946)\"\n    },\n    {\n      \"id\": 3,\n      \"url\": \"https://en.wikipedia.org/wiki/Italy_national_football_team\",\n      \"title\": \"Italy national football team\",\n      \"short_description\": \"Men's association football team\"\n    },\n    {\n      \"id\": 4,\n      \"url\": \"https://en.wikipedia.org/wiki/Economy_of_Italy\",\n      \"title\": \"Economy of Italy\",\n      \"short_description\": \"No short description available.\"\n    },\n    {\n      \"id\": 5,\n      \"url\": \"https://en.wikipedia.org/wiki/Tourism_in_Italy\",\n      \"title\": \"Tourism in Italy\",\n      \"short_description\": \"No short description available.\"\n    }\n  ],\n  \"query\": \"Italy\",\n  \"result_count\": 5\n}\n</code></pre></p>"},{"location":"api/response_examples/#no-results-found","title":"No Results Found","text":"<p>Request: <pre><code>curl \"http://localhost:8000/api/search/?q=xyznonexistentquery123\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"No results found.\",\n  \"results\": [],\n  \"query\": \"xyznonexistentquery123\",\n  \"result_count\": 0\n}\n</code></pre></p>"},{"location":"api/response_examples/#select-api-examples","title":"Select API Examples","text":""},{"location":"api/response_examples/#article-selection","title":"Article Selection","text":"<p>Request: <pre><code>curl \"http://localhost:8000/api/select/?link=https://en.wikipedia.org/wiki/Italy\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Select an option\",\n  \"options\": [\n    {\n      \"id\": 1,\n      \"description\": \"Read short description of the page\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Read summary of the page\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Read the full page content\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Read captions of images on the page\"\n    },\n    {\n      \"id\": 5,\n      \"description\": \"Read tables on the page\"\n    },\n    {\n      \"id\": 6,\n      \"description\": \"Read references and citations on the page\"\n    }\n  ],\n  \"article_url\": \"https://en.wikipedia.org/wiki/Italy\",\n  \"article_title\": \"Italy\"\n}\n</code></pre></p>"},{"location":"api/response_examples/#process-api-examples","title":"Process API Examples","text":""},{"location":"api/response_examples/#option-1-short-description","title":"Option 1: Short Description","text":"<p>Request: <pre><code>curl \"http://localhost:8000/api/process/?link=https://en.wikipedia.org/wiki/Italy&amp;option=1\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"type\": \"short_description\",\n  \"content\": \"Country in Southern Europe\",\n  \"article_url\": \"https://en.wikipedia.org/wiki/Italy\",\n  \"article_title\": \"Italy\"\n}\n</code></pre></p>"},{"location":"api/response_examples/#option-2-page-summary","title":"Option 2: Page Summary","text":"<p>Request: <pre><code>curl \"http://localhost:8000/api/process/?link=https://en.wikipedia.org/wiki/Italy&amp;option=2\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"type\": \"summary\",\n  \"content\": \"Italy, officially the Italian Republic, is a country in Southern and Western Europe. It consists of a peninsula that extends into the Mediterranean Sea, with the Alps on its northern land border, as well as nearly 800 islands, notably Sicily and Sardinia. Italy shares land borders with France to the west; Switzerland and Austria to the north; Slovenia to the east; and the two enclaves of Vatican City and San Marino. It is the tenth-largest country in Europe by area, covering 301,340 km2 (116,350 sq mi), and the third-most populous member state of the European Union, with nearly 59 million inhabitants. Italy's capital and largest city is Rome; other major cities include Milan, Naples, Turin, Palermo, Bologna, Florence, Genoa, and Venice. The history of Italy goes back to numerous Italic peoples\u2014notably including the ancient Romans, who conquered the Mediterranean world during the Roman Republic and ruled it for centuries during the Roman Empire. With the spread of Christianity, Rome became the seat of the Catholic Church and the Papacy. Barbarian invasions and other factors led to the decline and fall of the Western Roman Empire between late antiquity and the Early Middle Ages. By the 11th century, Italian city-states and maritime republics expanded, bringing renewed prosperity through commerce and laying the groundwork for modern capitalism. The Italian Renaissance flourished during the 15th and 16th centuries and spread to the rest of Europe. Italian explorers discovered new routes to the Far East and the New World, contributing significantly to the Age of Discovery. After centuries of political and territorial divisions, Italy was almost entirely unified in 1861, following wars of independence and the Expedition of the Thousand, establishing the Kingdom of Italy. From the late 19th to the early 20th century, Italy industrialised\u2014mainly in the north\u2014and acquired a colonial empire, while the south remained largely impoverished, fueling a large immigrant diaspora to the Americas. From 1915 to 1918, Italy took part in World War I with the Entente against the Central Powers. In 1922, the Italian fascist dictatorship was established. During World War II, Italy was first part of the Axis until an armistice with the Allied powers (1940\u20131943), then a co-belligerent of the Allies during the Italian resistance and the liberation of Italy (1943\u20131945). Following the war, the monarchy was replaced by a republic and the country enjoyed a strong recovery. A developed country with an advanced economy, Italy has the eighth-largest nominal GDP in the world, the second-largest manufacturing sector in Europe, and plays a significant role in regional and\u2014to a lesser extent\u2014global economic, military, cultural, and political affairs. It is a founding and leading member of the European Union and the Council of Europe, and is part of numerous other international organizations and forums. As a cultural superpower, Italy has long been a renowned global centre of art, music, literature, cuisine, fashion, science and technology, and the source of multiple inventions and discoveries. It has the highest number of World Heritage Sites (60) and is the fourth-most visited country in the world.\",\n  \"article_url\": \"https://en.wikipedia.org/wiki/Italy\",\n  \"article_title\": \"Italy\"\n}\n</code></pre></p>"},{"location":"api/response_examples/#option-3-full-content-truncated-example","title":"Option 3: Full Content (Truncated Example)","text":"<p>Request: <pre><code>curl \"http://localhost:8000/api/process/?link=https://en.wikipedia.org/wiki/Italy&amp;option=3\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"type\": \"full_content\",\n  \"content\": \"91% Italian 9% other \\n  84% Christianity 12% no religion 4% other \\n  Paragraph: Italy, officially the Italian Republic, is a country in Southern and Western Europe. It consists of a peninsula that extends into the Mediterranean Sea, with the Alps on its northern land border, as well as nearly 800 islands, notably Sicily and Sardinia. Italy shares land borders with France to the west; Switzerland and Austria to the north; Slovenia to the east; and the two enclaves of Vatican City and San Marino. It is the tenth-largest country in Europe by area, covering 301,340 km`2 (116,350 sq mi), and the third-most populous member state of the European Union, with nearly 59 million inhabitants. Italy's capital and largest city is Rome; other major cities include Milan, Naples, Turin, Palermo, Bologna, Florence, Genoa, and Venice.\\n \\n  Paragraph: The history of Italy goes back to numerous Italic peoples\u2014notably including the ancient Romans, who conquered the Mediterranean world during the Roman Republic and ruled it for centuries during the Roman Empire. With the spread of Christianity, Rome became the seat of the Catholic Church and the Papacy. Barbarian invasions and other factors led to the decline and fall of the Western Roman Empire between late antiquity and the Early Middle Ages. By the 11th century, Italian city-states and maritime republics expanded, bringing renewed prosperity through commerce and laying the groundwork for modern capitalism. \\n \\n  Heading: Etymology \\n \\n  Paragraph: The name Italy comes from the ancient Greek name for the southern part of the peninsula, Ital\u00eda. The Greeks called the peninsula Ital\u00eda because it was the land of the Itali, a tribe that lived in what is now Calabria. \\n \\n  Heading: History \\n \\n  Heading: Prehistory and antiquity \\n \\n  Paragraph: Thousands of years before the Roman Empire, Italy was inhabited by various peoples. The Etruscans were among the most important of these early civilizations...\",\n  \"article_url\": \"https://en.wikipedia.org/wiki/Italy\",\n  \"article_title\": \"Italy\"\n}\n</code></pre></p>"},{"location":"api/response_examples/#option-4-image-captions","title":"Option 4: Image Captions","text":"<p>Request: <pre><code>curl \"http://localhost:8000/api/process/?link=https://en.wikipedia.org/wiki/James_Bond&amp;option=4\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"type\": \"image_captions\",\n  \"content\": [\n    {\n      \"image_url\": \"https://upload.wikimedia.org/wikipedia/commons/d/d3/Aston.db5.coupe.300pix.jpg\",\n      \"final_caption\": \"The image showcases a classic Aston Martin DB5, a sleek silver sports car, parked on a paved area. The car's polished chrome grille and round headlights are prominently visible, reflecting its iconic design. In the background, other cars and greenery are faintly visible, suggesting a parking lot or a similar outdoor setting.\"\n    },\n    {\n      \"image_url\": \"https://upload.wikimedia.org/wikipedia/commons/7/7f/Daniel_Craig_-_Film_Premiere_%22Spectre%22_007_-_on_the_Red_Carpet_in_Berlin_%2822387409720%29_%28cropped%29.jpg\",\n      \"final_caption\": \"The image shows Daniel Craig, dressed in a dark suit and tie, standing on a red carpet at the Berlin premiere of \\\"Spectre.\\\" He is positioned in the foreground, facing slightly to the left, with a backdrop featuring the event's branding.\"\n    },\n    {\n      \"image_url\": \"https://upload.wikimedia.org/wikipedia/commons/e/e0/GoldeneyeEstate.jpg\",\n      \"final_caption\": \"The image shows a white, single-story house with a gray roof, situated in a lush, tropical environment. The house features wooden shutters on the windows and a covered porch area. Palm trees and other greenery surround the property, creating a serene and secluded atmosphere. The sky is clear and blue, indicating a sunny day.\"\n    },\n    {\n      \"image_url\": \"https://upload.wikimedia.org/wikipedia/commons/5/57/Goldfinger_-_Aston_Martin_DB5_%26_Sean_Connery.jpg\",\n      \"final_caption\": \"The image showcases a classic Aston Martin DB5, a sleek, silver sports car, prominently displayed in a museum-like setting. Beside the car stands a life-sized wax figure of Sean Connery, dressed in a sharp black suit and bow tie, with his arms crossed. In the background, a projected image of Connery in a suit is visible, adding context to the display. The setting includes a wall with sketches and a plaque, enhancing the historical and thematic presentation.\"\n    },\n    {\n      \"image_url\": \"https://upload.wikimedia.org/wikipedia/commons/c/c3/Hoagy_Carmichael_-_1947.jpg\",\n      \"final_caption\": \"The image is a black-and-white portrait of Hoagy Carmichael, a jazz composer and actor, taken in 1947. He is dressed in a suit and tie, with his head slightly tilted forward, looking directly at the camera. The background is plain and out of focus, emphasizing the subject.\"\n    },\n    {\n      \"image_url\": \"https://upload.wikimedia.org/wikipedia/commons/6/67/James_Bond_%28Daniel_Craig%29_figure_at_Madame_Tussauds_London_%2830318318754%29_b.jpg\",\n      \"final_caption\": \"The image depicts a waxwork of Daniel Craig, portraying James Bond, standing in a formal pose. He is dressed in a classic black tuxedo with a white shirt and black bow tie, hands in his pockets, and a watch on his left wrist. The background features a circular design with shades of purple and white, suggesting a themed setting, likely at Madame Tussauds in London.\"\n    },\n    {\n      \"image_url\": \"https://upload.wikimedia.org/wikipedia/commons/2/2a/James_Bond_Island.JPG\",\n      \"final_caption\": \"The image showcases James Bond Island, a striking natural formation in Thailand. A prominent, tall rock formation rises from the water, surrounded by lush greenery and towering cliffs. The sky is clear and blue, enhancing the serene and picturesque setting. The water reflects the surrounding landscape, adding to the tranquil atmosphere.\"\n    }\n  ],\n  \"article_url\": \"https://en.wikipedia.org/wiki/James_Bond\",\n  \"article_title\": \"James Bond\",\n  \"image_count\": 7\n}\n</code></pre></p>"},{"location":"api/response_examples/#option-5-table-analysis","title":"Option 5: Table Analysis","text":"<p>Request: <pre><code>curl \"http://localhost:8000/api/process/?link=https://en.wikipedia.org/wiki/James_Bond&amp;option=5\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"type\": \"tables\",\n  \"content\": {\n    \"url\": \"https://en.wikipedia.org/wiki/James_Bond\",\n    \"tables_found\": 9,\n    \"screenshots\": [\n      \"Screenshots deleted after analysis\"\n    ],\n    \"analyses\": [\n      {\n        \"success\": true,\n        \"analysis\": \"The table provided lists the publication years and titles of James Bond novels, along with their corresponding short story collections and editions. The table is divided into two columns: the left column lists the publication years and titles of the novels, while the right column lists the publication years and titles of the short story collections and editions.\\n\\nHere is a detailed description of the table:\\n\\n### Table Purpose:\\nThe table provides a chronological list of James Bond novels and their associated short story collections and editions.\\n\\n### Column Headers:\\n- **Left Column:** Publication Year and Novel Title\\n- **Right Column:** Publication Year and Short Story Collection/Edition Title\\n\\n### Data Rows:\\n\\n| Left Column (Publication Year and Novel Title) | Right Column (Publication Year and Short Story Collection/Edition Title) |\\n|---|---|\\n| 1953 Casino Royale[22] | 1960 For Your Eyes Only[29] (short stories) |\\n| 1954 Live and Let Die[23] | 1961 Thunderball[30] |\\n| 1955 Moonraker[24] | 1962 The Spy Who Loved Me[31] |\\n| 1956 Diamonds Are Forever[25] | 1963 On Her Majesty's Secret Service[32] |\\n| 1957 From Russia, with Love[26] | 1964 You Only Live Twice[33] |\\n| 1958 Dr. No[27] | 1965 The Man with the Golden Gun[34] |\\n| 1959 Goldfinger[28] | 1966 Octopussy and The Living Daylights[35] (short stories; \\\"The Property of a Lady\\\" added to subsequent editions) |\\n\\nThis table serves as a reference for the publication history of James Bond novels and their associated short story collections and editions.\"\n      },\n      {\n        \"success\": true,\n        \"analysis\": \"The table provided lists the years and titles of various works, presumably from a series or a collection. Here is a detailed description of the table:\\n\\n### Table Description:\\n\\n#### Purpose:\\nThe table lists the years and titles of works, likely from a series or a collection, with a focus on the years 2008 to 2023.\\n\\n#### Column Headers:\\nThe table has two columns:\\n1. **Year**\\n2. **Title**\\n\\n#### Data Rows:\\nThe table contains the following rows:\\n\\n1. **2008** - **Devil May Care**\\n2. **2011** - **Carte Blanche**\\n3. **2013** - **Solo**\\n4. **2015** - **Trigger Mortis**\\n5. **2018** - **Forever and a Day**\\n6. **2022** - **With a Mind to Kill**\\n7. **2023** - **On His Majesty's Secret Service**\\n\\nThis table appears to be a chronological list of works, possibly from a series, with the years indicating when each work was published or released.\"\n      }\n    ],\n    \"success\": true,\n    \"successful_analyses\": 9,\n    \"failed_analyses\": 0\n  },\n  \"article_url\": \"https://en.wikipedia.org/wiki/James_Bond\",\n  \"article_title\": \"James Bond\",\n  \"table_count\": 9\n}\n</code></pre></p>"},{"location":"api/response_examples/#option-6-references-and-citations","title":"Option 6: References and Citations","text":"<p>Request: <pre><code>curl \"http://localhost:8000/api/process/?link=https://en.wikipedia.org/wiki/James_Bond&amp;option=6\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"type\": \"citations\",\n  \"content\": [\n    \"Ian Fleming, The New Yorker, 21 April 1962\",\n    \"\u2014David Arnold\",\n    \"\u2014Q, to Bond, Licence to Kill\",\n    \"Reilly, Liam (20 February 2025). \\\"Amazon MGM Studios takes creative control of James Bond franchise\\\". CNN. CNN Business. Archived from the original on 21 February 2025. Retrieved 27 February 2025.\",\n    \"Uddin, Rafe (20 February 2025). \\\"Amazon MGM to take over creative direction of James Bond franchise\\\". Financial Times. Retrieved 20 February 2025.\",\n    \"Macintyre, Ben (5 April 2008). \\\"Bond \u2013 the real Bond\\\". The Times. p. 36.\",\n    \"\\\"Obituary: Colonel Peter Fleming, Author and explorer\\\". The Times. 20 August 1971. p. 14.\",\n    \"Hall, Chris (22 March 2020). \\\"From the archive: the real James Bond, 1973\\\". The Guardian. Retrieved 28 February 2023.\",\n    \"\\\"James Bond, Ornithologist, 89; Fleming Adopted Name for 007\\\". The New York Times. 17 February 1989. Archived from the original on 2 May 2019. Retrieved 22 August 2019.\",\n    \"Hellman, Geoffrey T. (21 April 1962). \\\"Bond's Creator\\\". The New Yorker. p. 32. section \\\"Talk of the Town\\\". Archived from the original on 21 January 2012. Retrieved 9 September 2011.\",\n    \"Cook, William (28 June 2004). \\\"Novel man\\\". New Statesman. p. 40.\",\n    \"Lycett, Andrew (2004). \\\"Fleming, Ian Lancaster (1908\u20131964) (subscription needed)\\\". Oxford Dictionary of National Biography (online ed.). Oxford University Press. doi:10.1093/ref:odnb/33168. Retrieved 7 September 2011.\",\n    \"\\\"Casino Royale\\\". The Books. Ian Fleming Publications. Archived from the original on 17 March 2012. Retrieved 31 October 2011.\",\n    \"\\\"Live and Let Die\\\". The Books. Ian Fleming Publications. Archived from the original on 17 March 2012. Retrieved 31 October 2011.\",\n    \"\\\"Moonraker\\\". The Books. Ian Fleming Publications. Archived from the original on 16 September 2011. Retrieved 31 October 2011.\",\n    \"\\\"Diamonds are Forever\\\". The Books. Ian Fleming Publications. Archived from the original on 17 March 2012. Retrieved 31 October 2011.\",\n    \"\\\"From Russia, with Love\\\". The Books. Ian Fleming Publications. Archived from the original on 1 April 2012. Retrieved 31 October 2011.\"\n  ],\n  \"article_url\": \"https://en.wikipedia.org/wiki/James_Bond\",\n  \"article_title\": \"James Bond\",\n  \"citation_count\": 17\n}\n</code></pre></p>"},{"location":"api/response_examples/#error-response-examples","title":"Error Response Examples","text":""},{"location":"api/response_examples/#invalid-url-format","title":"Invalid URL Format","text":"<p>Request: <pre><code>curl \"http://localhost:8000/api/select/?link=https://example.com/invalid\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Invalid Wikipedia URL format. Must be a full 'https://en.wikipedia.org/wiki/...' URL.\"\n}\n</code></pre></p>"},{"location":"api/response_examples/#missing-required-parameter","title":"Missing Required Parameter","text":"<p>Request: <pre><code>curl \"http://localhost:8000/api/search/\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Missing required parameter: q\"\n}\n</code></pre></p>"},{"location":"api/response_examples/#invalid-option-value","title":"Invalid Option Value","text":"<p>Request: <pre><code>curl \"http://localhost:8000/api/process/?link=https://en.wikipedia.org/wiki/Italy&amp;option=7\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Invalid option. Please select a valid option (1-6).\"\n}\n</code></pre></p>"},{"location":"api/response_examples/#service-unavailable","title":"Service Unavailable","text":"<p>Request: <pre><code>curl \"http://localhost:8000/api/process/?link=https://en.wikipedia.org/wiki/Italy&amp;option=4\"\n</code></pre></p> <p>Response (when AI service is down): <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Failed to connect to external services.\"\n}\n</code></pre></p>"},{"location":"api/response_examples/#rate-limit-exceeded","title":"Rate Limit Exceeded","text":"<p>Request: <pre><code># After making too many requests quickly\ncurl \"http://localhost:8000/api/search/?q=test\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Rate limit exceeded. Please try again later.\"\n}\n</code></pre></p>"},{"location":"api/response_examples/#response-field-descriptions","title":"Response Field Descriptions","text":""},{"location":"api/response_examples/#search-response-fields","title":"Search Response Fields","text":"Field Type Description <code>status</code> string Always \"success\" for valid requests <code>message</code> string Human-readable message <code>results</code> array Array of search result objects <code>results[].id</code> integer Sequential ID for the result <code>results[].url</code> string Full Wikipedia URL <code>results[].title</code> string Article title (URL-decoded) <code>results[].short_description</code> string Brief article description <code>query</code> string Original search query <code>result_count</code> integer Number of results returned"},{"location":"api/response_examples/#select-response-fields","title":"Select Response Fields","text":"Field Type Description <code>status</code> string Always \"success\" for valid requests <code>message</code> string Human-readable message <code>options</code> array Array of processing option objects <code>options[].id</code> integer Option number (1-6) <code>options[].description</code> string Description of what the option does <code>article_url</code> string Full Wikipedia URL <code>article_title</code> string Article title (URL-decoded)"},{"location":"api/response_examples/#process-response-fields","title":"Process Response Fields","text":"Field Type Description <code>status</code> string \"success\" or \"error\" <code>type</code> string Content type identifier <code>content</code> string/array/object Processed content (varies by option) <code>article_url</code> string Full Wikipedia URL <code>article_title</code> string Article title (URL-decoded) <code>image_count</code> integer Number of images (option 4 only) <code>table_count</code> integer Number of tables (option 5 only) <code>citation_count</code> integer Number of citations (option 6 only)"},{"location":"api/response_examples/#content-type-specifications","title":"Content Type Specifications","text":""},{"location":"api/response_examples/#text-content-structure","title":"Text Content Structure","text":"<p>Text content (options 1, 2, 3) includes: - Headings: Prefixed with \"Heading: \" - Paragraphs: Prefixed with \"Paragraph: \" - Lists: Individual items with proper spacing - Mathematical notation: Converted to readable text</p>"},{"location":"api/response_examples/#image-caption-structure","title":"Image Caption Structure","text":"<p>Image captions (option 4) include: - image_url: Direct link to the image file - final_caption: AI-generated description optimized for accessibility</p>"},{"location":"api/response_examples/#table-analysis-structure","title":"Table Analysis Structure","text":"<p>Table analysis (option 5) includes: - url: Original article URL - tables_found: Total number of tables detected - analyses: Array of analysis objects for each table - success: Boolean indicating overall success - successful_analyses: Count of successfully analyzed tables - failed_analyses: Count of failed analyses</p>"},{"location":"api/response_examples/#citation-structure","title":"Citation Structure","text":"<p>Citations (option 6) are returned as: - Array of strings: Each citation as a separate string - Formatted text: Ready for screen reader consumption - Complete references: Including authors, dates, and sources</p>"},{"location":"api/search_api/","title":"Search API","text":"<p>The Search API is the entry point for discovering Wikipedia articles. It uses Google Search scoped to Wikipedia to find relevant articles based on user queries.</p>"},{"location":"api/search_api/#endpoint","title":"Endpoint","text":"<pre><code>GET /api/search/\n</code></pre>"},{"location":"api/search_api/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>q</code> string Yes Search query (max 255 characters)"},{"location":"api/search_api/#parameter-details","title":"Parameter Details","text":"<p>Query (<code>q</code>) - Format: URL-encoded string - Max Length: 255 characters - Examples: <code>Python</code>, <code>Machine Learning</code>, <code>Climate Change</code> - Special Characters: Automatically URL-encoded by most HTTP clients</p>"},{"location":"api/search_api/#request-examples","title":"Request Examples","text":""},{"location":"api/search_api/#basic-search","title":"Basic Search","text":"<pre><code>curl \"http://localhost:8000/api/search/?q=Python\"\n</code></pre>"},{"location":"api/search_api/#search-with-spaces","title":"Search with Spaces","text":"<pre><code>curl \"http://localhost:8000/api/search/?q=Machine%20Learning\"\n# Or let curl handle encoding:\ncurl \"http://localhost:8000/api/search/?q=Machine Learning\"\n</code></pre>"},{"location":"api/search_api/#search-with-special-characters","title":"Search with Special Characters","text":"<pre><code>curl \"http://localhost:8000/api/search/?q=C%2B%2B%20programming\"\n# Searches for \"C++ programming\"\n</code></pre>"},{"location":"api/search_api/#response-format","title":"Response Format","text":""},{"location":"api/search_api/#success-response","title":"Success Response","text":"<pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Select the article you want to read\",\n  \"results\": [\n    {\n      \"id\": 1,\n      \"url\": \"https://en.wikipedia.org/wiki/Article_Title\",\n      \"title\": \"Article Title\",\n      \"short_description\": \"Brief description of the article\"\n    }\n  ],\n  \"query\": \"original search query\",\n  \"result_count\": 5\n}\n</code></pre>"},{"location":"api/search_api/#response-fields","title":"Response Fields","text":"Field Type Description <code>status</code> string Always \"success\" for valid requests <code>message</code> string Human-readable status message <code>results</code> array Array of search result objects (max 9 results) <code>query</code> string Original search query (URL-decoded) <code>result_count</code> integer Number of results returned"},{"location":"api/search_api/#result-object-fields","title":"Result Object Fields","text":"Field Type Description <code>id</code> integer Sequential identifier (1-9) <code>url</code> string Full Wikipedia article URL <code>title</code> string Article title (extracted from URL, spaces restored) <code>short_description</code> string Brief article description or \"No short description available.\""},{"location":"api/search_api/#search-behavior","title":"Search Behavior","text":""},{"location":"api/search_api/#search-process","title":"Search Process","text":"<ol> <li>Query Processing: Input is URL-decoded and validated</li> <li>Google Search: Query is scoped to <code>site:en.wikipedia.org</code></li> <li>Result Filtering: Duplicate URLs are removed while preserving order</li> <li>Description Fetching: Short descriptions are fetched in parallel for performance</li> <li>Response Assembly: Results are formatted and returned</li> </ol>"},{"location":"api/search_api/#search-scope","title":"Search Scope","text":"<ul> <li>Language: English Wikipedia only (<code>en.wikipedia.org</code>)</li> <li>Result Limit: Maximum 9 results per query</li> <li>Deduplication: Duplicate URLs are automatically removed</li> <li>Ordering: Results maintain Google Search ranking order</li> </ul>"},{"location":"api/search_api/#performance-optimizations","title":"Performance Optimizations","text":"<ul> <li>Parallel Processing: Short descriptions are fetched using parallel workers</li> <li>Caching: Search results are cached for 1 hour</li> <li>Timeout Handling: Individual description fetches have timeouts to prevent blocking</li> </ul>"},{"location":"api/search_api/#error-handling","title":"Error Handling","text":""},{"location":"api/search_api/#missing-query-parameter","title":"Missing Query Parameter","text":"<p>Request: <pre><code>curl \"http://localhost:8000/api/search/\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Missing required parameter: q\"\n}\n</code></pre></p>"},{"location":"api/search_api/#query-too-long","title":"Query Too Long","text":"<p>Request: <pre><code>curl \"http://localhost:8000/api/search/?q=very_long_query_that_exceeds_255_characters...\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"q is too long (max 255 characters)\"\n}\n</code></pre></p>"},{"location":"api/search_api/#no-results-found","title":"No Results Found","text":"<p>Request: <pre><code>curl \"http://localhost:8000/api/search/?q=xyznonexistentquery123\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"No results found.\",\n  \"results\": [],\n  \"query\": \"xyznonexistentquery123\",\n  \"result_count\": 0\n}\n</code></pre></p>"},{"location":"api/search_api/#service-error","title":"Service Error","text":"<p>Response: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"An error occurred while processing your search request.\"\n}\n</code></pre></p>"},{"location":"api/search_api/#usage-examples","title":"Usage Examples","text":""},{"location":"api/search_api/#javascriptfetch","title":"JavaScript/Fetch","text":"<pre><code>async function searchWikipedia(query) {\n  const url = `/api/search/?q=${encodeURIComponent(query)}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (data.status === 'success') {\n      console.log(`Found ${data.result_count} results for \"${data.query}\"`);\n      return data.results;\n    } else {\n      throw new Error(data.message);\n    }\n  } catch (error) {\n    console.error('Search failed:', error);\n    throw error;\n  }\n}\n\n// Usage\nsearchWikipedia('Artificial Intelligence')\n  .then(results =&gt; {\n    results.forEach(result =&gt; {\n      console.log(`${result.id}. ${result.title}`);\n      console.log(`   ${result.short_description}`);\n      console.log(`   ${result.url}`);\n    });\n  })\n  .catch(error =&gt; console.error(error));\n</code></pre>"},{"location":"api/search_api/#pythonrequests","title":"Python/Requests","text":"<pre><code>import requests\nfrom urllib.parse import quote\n\ndef search_wikipedia(query):\n    \"\"\"Search Wikipedia articles using Chakshu API.\"\"\"\n    url = f\"http://localhost:8000/api/search/?q={quote(query)}\"\n\n    try:\n        response = requests.get(url, timeout=10)\n        response.raise_for_status()\n        data = response.json()\n\n        if data['status'] == 'success':\n            print(f\"Found {data['result_count']} results for '{data['query']}'\")\n            return data['results']\n        else:\n            raise Exception(data['message'])\n\n    except requests.RequestException as e:\n        print(f\"Search failed: {e}\")\n        raise\n\n# Usage\ntry:\n    results = search_wikipedia('Machine Learning')\n    for result in results:\n        print(f\"{result['id']}. {result['title']}\")\n        print(f\"   {result['short_description']}\")\n        print(f\"   {result['url']}\")\n        print()\nexcept Exception as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"api/search_api/#curl-examples","title":"cURL Examples","text":"<pre><code># Basic search\ncurl \"http://localhost:8000/api/search/?q=Python\"\n\n# Search with JSON output formatting\ncurl -s \"http://localhost:8000/api/search/?q=Python\" | jq '.'\n\n# Extract just the titles\ncurl -s \"http://localhost:8000/api/search/?q=Python\" | jq -r '.results[].title'\n\n# Get the first result URL\ncurl -s \"http://localhost:8000/api/search/?q=Python\" | jq -r '.results[0].url'\n</code></pre>"},{"location":"api/search_api/#best-practices","title":"Best Practices","text":""},{"location":"api/search_api/#query-optimization","title":"Query Optimization","text":"<ul> <li>Be Specific: More specific queries return more relevant results</li> <li>Use Keywords: Include important keywords related to your topic</li> <li>Avoid Very Long Queries: Keep queries under 255 characters</li> <li>Handle Special Characters: Let your HTTP client handle URL encoding</li> </ul>"},{"location":"api/search_api/#error-handling_1","title":"Error Handling","text":"<ul> <li>Check Status: Always check the <code>status</code> field in responses</li> <li>Handle Empty Results: Check <code>result_count</code> before processing results</li> <li>Implement Retries: For network errors and timeouts</li> <li>Validate Input: Ensure queries are not empty or too long</li> </ul>"},{"location":"api/search_api/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Cache Results: Avoid repeated searches for the same query</li> <li>Batch Processing: If searching multiple terms, space out requests</li> <li>Handle Timeouts: Set appropriate timeout values for your use case</li> </ul>"},{"location":"api/search_api/#accessibility-integration","title":"Accessibility Integration","text":"<ul> <li>Announce Results: Inform screen reader users about the number of results</li> <li>Provide Context: Read out article titles and descriptions clearly</li> <li>Enable Navigation: Allow users to navigate through results easily</li> </ul>"},{"location":"api/search_api/#rate-limiting","title":"Rate Limiting","text":"<p>The Search API includes rate limiting to prevent abuse:</p> <ul> <li>Default Limit: 5 requests per minute per IP address</li> <li>Rate Limit Headers: Check response headers for current limits</li> <li>Exceeded Limit: Returns HTTP 429 with retry information</li> </ul>"},{"location":"api/search_api/#handling-rate-limits","title":"Handling Rate Limits","text":"<pre><code>async function searchWithRetry(query, maxRetries = 3) {\n  for (let attempt = 1; attempt &lt;= maxRetries; attempt++) {\n    try {\n      const response = await fetch(`/api/search/?q=${encodeURIComponent(query)}`);\n\n      if (response.status === 429) {\n        const retryAfter = response.headers.get('Retry-After') || 60;\n        console.log(`Rate limited. Retrying after ${retryAfter} seconds...`);\n        await new Promise(resolve =&gt; setTimeout(resolve, retryAfter * 1000));\n        continue;\n      }\n\n      return await response.json();\n    } catch (error) {\n      if (attempt === maxRetries) throw error;\n      await new Promise(resolve =&gt; setTimeout(resolve, 1000 * attempt));\n    }\n  }\n}\n</code></pre>"},{"location":"api/search_api/#integration-with-other-endpoints","title":"Integration with Other Endpoints","text":"<p>The Search API is typically used as the first step in a three-part workflow:</p> <ol> <li>Search \u2192 Find articles matching your query</li> <li>Select \u2192 Choose an article and see processing options</li> <li>Process \u2192 Extract specific content from the chosen article</li> </ol>"},{"location":"api/search_api/#complete-workflow-example","title":"Complete Workflow Example","text":"<pre><code># 1. Search for articles\nresults = search_wikipedia('Artificial Intelligence')\n\n# 2. Select the first result\nif results:\n    article_url = results[0]['url']\n\n    # 3. Get processing options\n    options_response = requests.get(f\"/api/select/?link={quote(article_url)}\")\n\n    # 4. Process the article (get summary)\n    summary_response = requests.get(f\"/api/process/?link={quote(article_url)}&amp;option=2\")\n</code></pre>"},{"location":"api/search_api/#next-steps","title":"Next Steps","text":"<ul> <li>Content Processing API - Learn about the Select and Process endpoints</li> <li>Response Examples - See complete response examples</li> <li>Error Handling - Comprehensive error handling guide</li> </ul>"},{"location":"features/content_processing/","title":"Content Processing Features","text":"<p>Chakshu's content processing capabilities are designed from the ground up to make Wikipedia articles accessible to blind and visually impaired users. This page details the accessibility-focused features and how they work.</p>"},{"location":"features/content_processing/#overview","title":"Overview","text":"<p>Chakshu transforms complex Wikipedia articles into structured, screen-reader-friendly content through six specialized processing options:</p> <ol> <li>Short Description - Quick article overview</li> <li>Page Summary - Detailed introduction</li> <li>Full Content - Complete article with structured formatting</li> <li>Image Captions - AI-generated visual descriptions</li> <li>Table Analysis - Screen-reader friendly table descriptions</li> <li>References - Citations and bibliography</li> </ol>"},{"location":"features/content_processing/#accessibility-first-design-principles","title":"Accessibility-First Design Principles","text":""},{"location":"features/content_processing/#1-structured-content-hierarchy","title":"1. Structured Content Hierarchy","text":"<p>All text content is processed to create a clear, navigable structure:</p> <pre><code>Heading: Main Article Title\n  Paragraph: Introduction paragraph...\n\n  Heading: Section Title\n    Paragraph: Section content...\n\n    Heading: Subsection Title\n      Paragraph: Subsection content...\n</code></pre> <p>Benefits for Screen Readers: - Clear heading navigation (H1, H2, H3 levels) - Proper content flow and structure - Easy section jumping and navigation</p>"},{"location":"features/content_processing/#2-clean-readable-text","title":"2. Clean, Readable Text","text":"<p>Wikipedia's complex markup is cleaned and optimized:</p> <p>Before Processing: <pre><code>&lt;p&gt;The &lt;a href=\"/wiki/Python\"&gt;Python&lt;/a&gt; programming language&lt;sup&gt;[1]&lt;/sup&gt; \nwas created by &lt;a href=\"/wiki/Guido_van_Rossum\"&gt;Guido van Rossum&lt;/a&gt;.&lt;/p&gt;\n</code></pre></p> <p>After Processing: <pre><code>Paragraph: The Python programming language was created by Guido van Rossum.\n</code></pre></p> <p>Accessibility Improvements: - Reference links removed (available separately via option 6) - HTML tags stripped - Proper spacing and formatting - Link text preserved without navigation clutter</p>"},{"location":"features/content_processing/#3-mathematical-content-conversion","title":"3. Mathematical Content Conversion","text":"<p>Complex mathematical equations are converted to readable text:</p> <p>LaTeX Input: <pre><code>E = mc^2\n</code></pre></p> <p>Readable Output: <pre><code>E equals m c raised to the power 2\n</code></pre></p> <p>Chemical Formulas: <pre><code>Input: H\u2082SO\u2084\nOutput: H 2 S O 4 (sulfuric acid)\n</code></pre></p>"},{"location":"features/content_processing/#content-processing-options-detailed","title":"Content Processing Options Detailed","text":""},{"location":"features/content_processing/#option-1-short-description","title":"Option 1: Short Description","text":"<p>Purpose: Provides a brief, one-sentence description of the article topic.</p> <p>Example Output: <pre><code>{\n  \"content\": \"Country in Southern Europe\"\n}\n</code></pre></p> <p>Accessibility Features: - Concise overview for quick understanding - Perfect for search result previews - Helps users decide if article is relevant</p> <p>Use Cases: - Article selection assistance - Quick topic identification - Search result summaries</p>"},{"location":"features/content_processing/#option-2-page-summary","title":"Option 2: Page Summary","text":"<p>Purpose: Returns the Wikipedia article's lead section (introduction).</p> <p>Example Output: <pre><code>{\n  \"content\": \"Italy, officially the Italian Republic, is a country in Southern and Western Europe. It consists of a peninsula that extends into the Mediterranean Sea, with the Alps on its northern land border, as well as nearly 800 islands, notably Sicily and Sardinia...\"\n}\n</code></pre></p> <p>Accessibility Features: - Complete introduction without navigation clutter - Mathematical content converted to readable text - Proper sentence structure and flow - Reference markers removed</p> <p>Processing Steps: 1. Fetch article summary via Wikipedia API 2. Clean HTML tags and formatting 3. Convert mathematical notation 4. Remove reference links 5. Optimize for text-to-speech</p>"},{"location":"features/content_processing/#option-3-full-content","title":"Option 3: Full Content","text":"<p>Purpose: Provides the complete article content with structured formatting.</p> <p>Example Output: <pre><code>Heading: Italy\n\nParagraph: Italy, officially the Italian Republic, is a country in Southern and Western Europe...\n\nHeading: Etymology\n\nParagraph: The name Italy comes from the ancient Greek name...\n\nHeading: History\n\nHeading: Prehistory and antiquity\n\nParagraph: Thousands of years before the Roman Empire...\n</code></pre></p> <p>Accessibility Features: - Hierarchical Structure: Clear heading levels for navigation - Content Segmentation: Paragraphs clearly marked - List Processing: Bullet points and numbered lists properly formatted - Mathematical Conversion: Equations converted to readable text - Chemical Notation: Scientific formulas made accessible</p> <p>Processing Pipeline: 1. HTML Parsing: Extract content from Wikipedia's HTML 2. Structure Analysis: Identify headings, paragraphs, lists 3. Content Cleaning: Remove navigation elements, references 4. Mathematical Processing: Convert LaTeX and chemical formulas 5. Accessibility Formatting: Add structure markers for screen readers</p>"},{"location":"features/content_processing/#option-4-image-captions","title":"Option 4: Image Captions","text":"<p>Purpose: Generates detailed, accessibility-focused descriptions of all images.</p> <p>Example Output: <pre><code>{\n  \"content\": [\n    {\n      \"image_url\": \"https://upload.wikimedia.org/wikipedia/commons/d/d3/Aston.db5.coupe.300pix.jpg\",\n      \"final_caption\": \"The image showcases a classic Aston Martin DB5, a sleek silver sports car, parked on a paved area. The car's polished chrome grille and round headlights are prominently visible, reflecting its iconic design. In the background, other cars and greenery are faintly visible, suggesting a parking lot or a similar outdoor setting.\"\n    }\n  ],\n  \"image_count\": 7\n}\n</code></pre></p> <p>AI-Powered Features: - Context-Aware Descriptions: Uses article title and existing captions for context - Detailed Visual Analysis: Comprehensive descriptions of visual elements - Accessibility Language: Optimized for screen readers and text-to-speech - High-Resolution Processing: Analyzes highest quality images available</p> <p>Processing Workflow: 1. Image Discovery: Find all images on the Wikipedia page 2. Metadata Extraction: Gather existing captions and descriptions 3. High-Resolution Fetching: Get the best quality version of each image 4. AI Analysis: Process images with Qwen2.5-VL vision model 5. Caption Generation: Create detailed, accessible descriptions 6. Quality Assurance: Filter out failed or low-quality captions</p> <p>Caption Quality Features: - Spatial Relationships: Describes positioning and layout - Color and Lighting: Mentions relevant visual characteristics - Context Integration: Incorporates article topic and existing metadata - Action Descriptions: Explains what people or objects are doing - Background Details: Includes relevant environmental information</p>"},{"location":"features/content_processing/#option-5-table-analysis","title":"Option 5: Table Analysis","text":"<p>Purpose: Converts complex visual tables into screen-reader friendly descriptions.</p> <p>Example Output: <pre><code>{\n  \"content\": {\n    \"analyses\": [\n      {\n        \"success\": true,\n        \"analysis\": \"The table provides a chronological list of James Bond novels and their associated short story collections and editions.\\n\\n### Table Purpose:\\nThe table provides a chronological list of James Bond novels...\\n\\n### Column Headers:\\n- **Left Column:** Publication Year and Novel Title\\n- **Right Column:** Publication Year and Short Story Collection/Edition Title\\n\\n### Data Rows:\\n\\n| Left Column | Right Column |\\n|---|---|\\n| 1953 Casino Royale[22] | 1960 For Your Eyes Only[29] |\\n| 1954 Live and Let Die[23] | 1961 Thunderball[30] |\"\n      }\n    ],\n    \"tables_found\": 3,\n    \"successful_analyses\": 3\n  }\n}\n</code></pre></p> <p>Advanced Processing: - Screenshot Capture: Uses Playwright to capture table images - AI Vision Analysis: Qwen2.5-VL model analyzes table structure - Structured Description: Converts visual layout to readable format - Data Extraction: Identifies headers, rows, and relationships</p> <p>Table Processing Pipeline: 1. Page Analysis: Scan Wikipedia page for table elements 2. Screenshot Capture: Take high-quality images of each table 3. AI Processing: Analyze table structure and content 4. Description Generation: Create accessible table descriptions 5. Quality Validation: Ensure descriptions are complete and accurate</p> <p>Accessibility Benefits: - Structure Explanation: Describes table purpose and organization - Header Identification: Clearly identifies column and row headers - Data Relationships: Explains how data points relate to each other - Navigation Guidance: Provides logical reading order for table data</p>"},{"location":"features/content_processing/#option-6-references-and-citations","title":"Option 6: References and Citations","text":"<p>Purpose: Extracts all references and citations from the article.</p> <p>Example Output: <pre><code>{\n  \"content\": [\n    \"Ian Fleming, The New Yorker, 21 April 1962\",\n    \"Reilly, Liam (20 February 2025). \\\"Amazon MGM Studios takes creative control of James Bond franchise\\\". CNN. CNN Business.\",\n    \"Macintyre, Ben (5 April 2008). \\\"Bond \u2013 the real Bond\\\". The Times. p. 36.\"\n  ],\n  \"citation_count\": 220\n}\n</code></pre></p> <p>Features: - Complete Bibliography: All article references extracted - Clean Formatting: Optimized for screen reader consumption - Source Information: Authors, titles, dates, and publications included - Academic Standards: Proper citation format maintained</p>"},{"location":"features/content_processing/#performance-optimizations","title":"Performance Optimizations","text":""},{"location":"features/content_processing/#parallel-processing","title":"Parallel Processing","text":"<p>Image Processing: <pre><code># Multiple images processed simultaneously\nprocessed_results = Parallel(n_jobs=-1, backend=\"threading\")(\n    delayed(_process_single_image)(img, all_captions) \n    for img in images_to_process\n)\n</code></pre></p> <p>Benefits: - Faster processing of multiple images - Better resource utilization - Reduced overall response time</p>"},{"location":"features/content_processing/#intelligent-caching","title":"Intelligent Caching","text":"<p>Cache Strategy: - Text Content: 1 hour cache (articles change infrequently) - Image Captions: Indefinite cache (images rarely change) - Table Analysis: 1 hour cache (balance between freshness and performance) - Search Results: 1 hour cache (search patterns are often repeated)</p> <p>Cache Benefits: - Faster response times for repeated requests - Reduced load on external services - Better user experience</p>"},{"location":"features/content_processing/#error-handling-and-graceful-degradation","title":"Error Handling and Graceful Degradation","text":"<p>Robust Processing: <pre><code>def safe_get_short_description(url):\n    try:\n        desc = get_short_description(url)\n        return desc if desc else \"Short description not available.\"\n    except Exception as e:\n        logger.error(f\"Error getting short description for {url}: {str(e)}\")\n        return \"Error fetching description.\"\n</code></pre></p> <p>Benefits: - Continues processing even if some operations fail - Provides partial results when possible - Clear error messages for users</p>"},{"location":"features/content_processing/#integration-with-assistive-technologies","title":"Integration with Assistive Technologies","text":""},{"location":"features/content_processing/#screen-reader-optimization","title":"Screen Reader Optimization","text":"<p>Structured Output: - Proper heading hierarchy (H1 \u2192 H2 \u2192 H3) - Clear content boundaries - Logical reading order - Skip navigation options</p> <p>ARIA-Compatible Structure: <pre><code>&lt;article&gt;\n  &lt;h1&gt;Article Title&lt;/h1&gt;\n  &lt;section&gt;\n    &lt;h2&gt;Section Title&lt;/h2&gt;\n    &lt;p&gt;Paragraph content...&lt;/p&gt;\n  &lt;/section&gt;\n&lt;/article&gt;\n</code></pre></p>"},{"location":"features/content_processing/#text-to-speech-optimization","title":"Text-to-Speech Optimization","text":"<p>Speech-Friendly Features: - Natural sentence structure - Proper punctuation for pauses - Phonetic spelling for complex terms - Abbreviation expansion</p> <p>Mathematical Content: - Equations converted to speakable format - Chemical formulas with proper pronunciation - Units and measurements clearly stated</p>"},{"location":"features/content_processing/#voice-command-integration","title":"Voice Command Integration","text":"<p>Structured Navigation: - \"Read next section\" - \"Skip to references\" - \"Describe images\" - \"Read table data\"</p>"},{"location":"features/content_processing/#quality-assurance","title":"Quality Assurance","text":""},{"location":"features/content_processing/#content-validation","title":"Content Validation","text":"<p>Text Processing: - HTML tag removal verification - Mathematical conversion accuracy - Reference link cleanup - Proper formatting validation</p> <p>AI-Generated Content: - Caption relevance checking - Table description completeness - Error detection and filtering - Quality scoring and ranking</p>"},{"location":"features/content_processing/#accessibility-testing","title":"Accessibility Testing","text":"<p>Screen Reader Testing: - NVDA compatibility - JAWS compatibility - VoiceOver compatibility - Proper navigation flow</p> <p>Text-to-Speech Testing: - Natural speech patterns - Proper pronunciation - Appropriate reading speed - Clear content boundaries</p>"},{"location":"features/content_processing/#future-enhancements","title":"Future Enhancements","text":""},{"location":"features/content_processing/#planned-features","title":"Planned Features","text":"<p>Enhanced AI Capabilities: - Multi-language image captioning - Video content description - Interactive element descriptions - Real-time content updates</p> <p>Improved Accessibility: - Braille output formatting - Customizable reading preferences - Voice command integration - Personalized content filtering</p> <p>Performance Improvements: - Edge caching for global users - Predictive content processing - Adaptive quality based on connection - Progressive content loading</p>"},{"location":"features/content_processing/#community-contributions","title":"Community Contributions","text":"<p>Open Source Development: - Accessibility expert feedback - Screen reader user testing - Multi-language support - Platform-specific optimizations</p>"},{"location":"features/content_processing/#next-steps","title":"Next Steps","text":"<ul> <li>Image Captioning - Deep dive into AI-powered image descriptions</li> <li>Table Analysis - Detailed table processing capabilities</li> <li>Mathematical Content - LaTeX and formula conversion</li> <li>API Documentation - Technical API reference</li> </ul>"},{"location":"features/image_captioning/","title":"AI-Powered Image Captioning","text":"<p>Chakshu's image captioning system uses advanced computer vision to generate detailed, accessibility-focused descriptions of images found in Wikipedia articles. This feature is powered by the Qwen2.5-VL vision-language model running through Ollama.</p>"},{"location":"features/image_captioning/#overview","title":"Overview","text":"<p>The image captioning system transforms visual content into comprehensive text descriptions that help visually impaired users understand the visual elements of Wikipedia articles.</p>"},{"location":"features/image_captioning/#key-features","title":"Key Features","text":"<ul> <li>Context-Aware Descriptions: Uses article context and existing metadata</li> <li>Detailed Visual Analysis: Comprehensive descriptions of visual elements</li> <li>Accessibility Optimization: Language optimized for screen readers</li> <li>High-Resolution Processing: Analyzes the highest quality images available</li> <li>Parallel Processing: Multiple images processed simultaneously for performance</li> </ul>"},{"location":"features/image_captioning/#how-it-works","title":"How It Works","text":""},{"location":"features/image_captioning/#processing-pipeline","title":"Processing Pipeline","text":"<pre><code>graph TD\n    A[Wikipedia Article] --&gt; B[Image Discovery]\n    B --&gt; C[Metadata Extraction]\n    C --&gt; D[High-Resolution Fetching]\n    D --&gt; E[AI Vision Analysis]\n    E --&gt; F[Caption Generation]\n    F --&gt; G[Quality Validation]\n    G --&gt; H[Accessible Description]\n</code></pre>"},{"location":"features/image_captioning/#1-image-discovery","title":"1. Image Discovery","text":"<p>The system scans Wikipedia articles to find all images:</p> <pre><code># Extract images from Wikipedia API\napi_url = f\"https://en.wikipedia.org/w/api.php?action=query&amp;prop=images&amp;format=json&amp;titles={page_title}\"\nresponse = _fetch_api(api_url)\nimages_to_process = []\nfor page_data in response.get(\"query\", {}).get(\"pages\", {}).values():\n    images_to_process.extend(page_data.get(\"images\", []))\n</code></pre> <p>Image Types Processed: - Photographs and illustrations - Diagrams and charts - Maps and geographical images - Historical documents and artifacts - Scientific and technical imagery</p> <p>Excluded Content: - SVG files (not supported by vision model) - Decorative elements and icons - Navigation images - Very small thumbnails</p>"},{"location":"features/image_captioning/#2-metadata-extraction","title":"2. Metadata Extraction","text":"<p>The system gathers existing context about each image:</p> <pre><code># Fetch image metadata from Wikipedia\nmetadata_response = _fetch_api(api_url)\nmetadata = page[\"imageinfo\"][0].get(\"extmetadata\", {})\n\ntitle_caption = clean_html(metadata.get(\"ImageDescription\", {}).get(\"value\"))\ndescription = clean_html(metadata.get(\"ObjectName\", {}).get(\"value\"))\n</code></pre> <p>Metadata Sources: - ImageDescription: Original image caption - ObjectName: Image title or subject - Artist: Creator information - DateTimeOriginal: When the image was created - Categories: Image classification tags</p>"},{"location":"features/image_captioning/#3-high-resolution-processing","title":"3. High-Resolution Processing","text":"<p>The system fetches the highest quality version of each image:</p> <pre><code>def get_high_resolution_image_url(image_title):\n    commons_api = \"https://commons.wikimedia.org/w/api.php\"\n    params = {\n        \"action\": \"query\",\n        \"titles\": image_title,\n        \"prop\": \"imageinfo\",\n        \"iiprop\": \"url\",\n        \"iiurlwidth\": 4000,  # Request high resolution\n        \"format\": \"json\",\n    }\n</code></pre> <p>Quality Benefits: - Better detail recognition - More accurate object identification - Improved text reading in images - Enhanced spatial relationship understanding</p>"},{"location":"features/image_captioning/#4-ai-vision-analysis","title":"4. AI Vision Analysis","text":"<p>The core of the system uses Qwen2.5-VL for image analysis:</p>"},{"location":"features/image_captioning/#model-specifications","title":"Model Specifications","text":"<p>Qwen2.5-VL Model: - Architecture: Vision-Language Transformer - Capabilities: Image understanding, text generation, spatial reasoning - Strengths: Detailed descriptions, context awareness, multilingual support - Optimization: Fine-tuned for accessibility descriptions</p>"},{"location":"features/image_captioning/#prompt-engineering","title":"Prompt Engineering","text":"<p>The system uses a carefully crafted prompt to generate accessibility-focused descriptions:</p> <pre><code>IMAGE_CAPTIONING_PROMPT = \"\"\"\n[User]: Forget all previous messages and context. Focus **only** on the provided image.\n\nYou are an AI specialized in generating **highly descriptive yet concise captions** for images,\ndesigned to help **visually impaired individuals** understand the scene with clarity.\n\n### **Key Instructions:**\n1. **Use Provided Context for Identification (If Certain):**\n   - If the **Title, Caption, or Description** mentions a **specific person, object, or place**, use the name **instead of generic terms**.\n   - If uncertain, describe the object or person as seen without assumption.\n2. **Describe Actions and Positions Clearly:**\n   - Identify what each person is doing.\n   - Specify relative positioning (who is sitting, standing, or interacting how).\n3. **Include Background Elements Only If Relevant:**\n   - Mention key visible details but avoid adding details that are not evident.\n4. **Concise Yet Detailed:** Use structured, vivid descriptions while keeping it short and natural.\n\n### **Context Provided (Use Only If It Matches What Is Seen):**\n- **Title:** {Title}\n- **Caption:** {Caption}\n- **Description:** {Description}\n\n### **Your Task:**\nGenerate a **short but structured paragraph** that accurately describes:\n- **The main subjects and their actions.**\n- **Their spatial arrangement (who is sitting, standing, or interacting how).**\n- **Any relevant background elements.**\n- **Ensure clarity while keeping it brief.**\n\"\"\"\n</code></pre>"},{"location":"features/image_captioning/#api-integration","title":"API Integration","text":"<p>The system communicates with Ollama through a FastAPI wrapper:</p> <pre><code>def generate_image_caption(image_url, title, caption, description):\n    prompt = IMAGE_CAPTIONING_PROMPT.format(\n        Title=title, \n        Caption=caption, \n        Description=description\n    )\n    payload = {\"prompt\": prompt, \"image_url\": image_url}\n\n    service_url = get_env_variable(\"OLLAMA_BASE_URL\") + \"/query\"\n    response = requests.post(service_url, json=payload, timeout=90)\n\n    return response.json().get(\"response\")\n</code></pre>"},{"location":"features/image_captioning/#5-quality-validation","title":"5. Quality Validation","text":"<p>The system includes multiple quality checks:</p> <p>Technical Validation: - Response completeness check - Minimum description length - Proper sentence structure - No placeholder text</p> <p>Content Validation: - Relevance to image content - Appropriate level of detail - Accessibility language standards - Context consistency</p>"},{"location":"features/image_captioning/#caption-quality-features","title":"Caption Quality Features","text":""},{"location":"features/image_captioning/#accessibility-focused-language","title":"Accessibility-Focused Language","text":"<p>Spatial Descriptions: <pre><code>\"The image shows Daniel Craig, dressed in a dark suit and tie, standing on a red carpet at the Berlin premiere of 'Spectre.' He is positioned in the foreground, facing slightly to the left, with a backdrop featuring the event's branding.\"\n</code></pre></p> <p>Key Elements: - Subject Identification: \"Daniel Craig\" - Appearance Details: \"dressed in a dark suit and tie\" - Spatial Position: \"positioned in the foreground, facing slightly to the left\" - Context Information: \"red carpet at the Berlin premiere of 'Spectre'\" - Background Details: \"backdrop featuring the event's branding\"</p>"},{"location":"features/image_captioning/#detailed-visual-analysis","title":"Detailed Visual Analysis","text":"<p>Comprehensive Descriptions: <pre><code>\"The image showcases a classic Aston Martin DB5, a sleek silver sports car, parked on a paved area. The car's polished chrome grille and round headlights are prominently visible, reflecting its iconic design. In the background, other cars and greenery are faintly visible, suggesting a parking lot or a similar outdoor setting.\"\n</code></pre></p> <p>Description Components: - Object Identification: \"classic Aston Martin DB5\" - Visual Characteristics: \"sleek silver sports car\" - Specific Details: \"polished chrome grille and round headlights\" - Design Elements: \"reflecting its iconic design\" - Environmental Context: \"parking lot or similar outdoor setting\"</p>"},{"location":"features/image_captioning/#context-integration","title":"Context Integration","text":"<p>The system intelligently uses available context:</p> <p>With Context: - Article about \"James Bond\" + Image of car = \"Aston Martin DB5 (James Bond's iconic car)\" - Article about \"Italy\" + Image of building = \"Italian architecture\" or specific landmark</p> <p>Without Context: - Generic descriptions based purely on visual analysis - Focus on observable elements and characteristics</p>"},{"location":"features/image_captioning/#performance-optimization","title":"Performance Optimization","text":""},{"location":"features/image_captioning/#parallel-processing","title":"Parallel Processing","text":"<p>Multiple images are processed simultaneously:</p> <pre><code>processed_results = Parallel(n_jobs=-1, backend=\"threading\")(\n    delayed(_process_single_image)(img, all_captions) \n    for img in images_to_process\n)\n</code></pre> <p>Benefits: - Faster overall processing time - Better resource utilization - Improved user experience</p>"},{"location":"features/image_captioning/#caching-strategy","title":"Caching Strategy","text":"<p>Cache Levels: 1. Database Cache: Permanent storage of generated captions 2. Memory Cache: Fast access to recently processed images 3. CDN Cache: Global distribution of processed results</p> <p>Cache Keys: <pre><code>cache_key = f\"image_caption:{image_url_hash}:{model_version}\"\n</code></pre></p>"},{"location":"features/image_captioning/#error-handling","title":"Error Handling","text":"<p>Graceful Degradation: <pre><code>def _process_single_image(img_info, all_captions):\n    try:\n        # Full processing pipeline\n        return process_image_with_ai(img_info)\n    except ServiceUnavailableError:\n        # Fallback to existing caption\n        return use_existing_caption(img_info)\n    except Exception as e:\n        # Log error and skip image\n        logger.error(f\"Failed to process image: {e}\")\n        return None\n</code></pre></p>"},{"location":"features/image_captioning/#integration-examples","title":"Integration Examples","text":""},{"location":"features/image_captioning/#api-usage","title":"API Usage","text":"<p>Request: <pre><code>curl \"http://localhost:8000/api/process/?link=https://en.wikipedia.org/wiki/James_Bond&amp;option=4\"\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"type\": \"image_captions\",\n  \"content\": [\n    {\n      \"image_url\": \"https://upload.wikimedia.org/wikipedia/commons/d/d3/Aston.db5.coupe.300pix.jpg\",\n      \"final_caption\": \"The image showcases a classic Aston Martin DB5...\"\n    }\n  ],\n  \"image_count\": 7\n}\n</code></pre></p>"},{"location":"features/image_captioning/#client-integration","title":"Client Integration","text":"<p>JavaScript Example: <pre><code>async function getImageCaptions(articleUrl) {\n  try {\n    const response = await fetch(`/api/process/?link=${encodeURIComponent(articleUrl)}&amp;option=4`);\n    const data = await response.json();\n\n    if (data.status === 'success') {\n      data.content.forEach((image, index) =&gt; {\n        console.log(`Image ${index + 1}:`);\n        console.log(`URL: ${image.image_url}`);\n        console.log(`Description: ${image.final_caption}`);\n        console.log('---');\n      });\n    }\n  } catch (error) {\n    console.error('Failed to get image captions:', error);\n  }\n}\n</code></pre></p>"},{"location":"features/image_captioning/#screen-reader-integration","title":"Screen Reader Integration","text":"<p>ARIA Labels: <pre><code>&lt;img src=\"image.jpg\" \n     alt=\"AI-generated description from Chakshu\"\n     aria-describedby=\"chakshu-caption-1\"&gt;\n&lt;div id=\"chakshu-caption-1\" class=\"sr-only\"&gt;\n  The image showcases a classic Aston Martin DB5, a sleek silver sports car...\n&lt;/div&gt;\n</code></pre></p>"},{"location":"features/image_captioning/#configuration","title":"Configuration","text":""},{"location":"features/image_captioning/#environment-variables","title":"Environment Variables","text":"<pre><code># Ollama service configuration\nOLLAMA_BASE_URL=http://localhost:11434\nMODEL_NAME=qwen2.5vl\n\n# Processing settings\nIMAGE_PROCESSING_TIMEOUT=90\nMAX_CONCURRENT_IMAGES=5\nCACHE_TIMEOUT_SECONDS=3600\n\n# Quality settings\nMIN_CAPTION_LENGTH=50\nMAX_CAPTION_LENGTH=500\n</code></pre>"},{"location":"features/image_captioning/#model-configuration","title":"Model Configuration","text":"<p>Ollama Setup: <pre><code># Install Ollama\ncurl -fsSL https://ollama.ai/install.sh | sh\n\n# Pull the Qwen2.5-VL model\nollama pull qwen2.5vl\n\n# Start Ollama service\nollama serve\n</code></pre></p>"},{"location":"features/image_captioning/#troubleshooting","title":"Troubleshooting","text":""},{"location":"features/image_captioning/#common-issues","title":"Common Issues","text":"<p>Model Not Available: <pre><code># Check if model is installed\nollama list\n\n# Pull model if missing\nollama pull qwen2.5vl\n</code></pre></p> <p>Service Connection Issues: <pre><code># Check Ollama service status\ncurl http://localhost:11434/api/tags\n\n# Restart Ollama if needed\nollama serve\n</code></pre></p> <p>Performance Issues: - Reduce concurrent processing: <code>MAX_CONCURRENT_IMAGES=3</code> - Increase timeout: <code>IMAGE_PROCESSING_TIMEOUT=120</code> - Check system resources (RAM, GPU usage)</p>"},{"location":"features/image_captioning/#error-messages","title":"Error Messages","text":"<p>\"Failed to connect to external services\": - Ollama service is not running - Network connectivity issues - Firewall blocking connections</p> <p>\"Image processing timed out\": - Increase timeout settings - Check system performance - Reduce concurrent processing</p> <p>\"No processable images found\": - Article contains only SVG images - Images are too small or low quality - Network issues fetching images</p>"},{"location":"features/image_captioning/#future-enhancements","title":"Future Enhancements","text":""},{"location":"features/image_captioning/#planned-improvements","title":"Planned Improvements","text":"<p>Enhanced AI Capabilities: - Multi-language caption generation - Specialized models for different image types - Real-time caption updates - Interactive image exploration</p> <p>Performance Optimizations: - GPU acceleration support - Edge computing deployment - Predictive image processing - Adaptive quality settings</p> <p>Accessibility Features: - Customizable description detail levels - Voice-optimized descriptions - Braille-friendly formatting - Integration with assistive technologies</p>"},{"location":"features/image_captioning/#community-contributions","title":"Community Contributions","text":"<p>Open Source Development: - Model fine-tuning for accessibility - Multi-language support - Platform-specific optimizations - Quality improvement feedback</p>"},{"location":"features/image_captioning/#next-steps","title":"Next Steps","text":"<ul> <li>Table Analysis - Learn about table processing capabilities</li> <li>Mathematical Content - LaTeX and formula conversion</li> <li>API Documentation - Technical API reference</li> <li>Architecture - AI system architecture details</li> </ul>"},{"location":"modules/","title":"Modules Overview","text":"<p>The Chakshu project is organized into several Django apps, each responsible for a distinct set of functionalities. This modular design promotes separation of concerns and makes the codebase easier to manage and scale.</p>"},{"location":"modules/#django-apps","title":"Django Apps","text":"<p>The primary applications within this project are:</p> <ul> <li> <p>Core App (<code>core</code>):     Handles the main API logic, orchestrates calls to other services/apps, and manages interactions with external APIs like the MediaWiki API. It defines the primary user-facing API endpoints.</p> </li> <li> <p>Scraper App (<code>scraper</code>):     Responsible for all web scraping activities. It contains the logic to fetch and parse content from Wikipedia pages, such as short descriptions, full text, and citations.</p> </li> <li> <p>Captioner App (<code>captioner</code>):     Dedicated to generating or retrieving captions for images found on web pages.</p> </li> <li> <p>API App (<code>api</code>):     Serves as a routing and namespacing layer for the project's API. It aggregates URL patterns from other apps like <code>core</code> and <code>scraper</code>.</p> </li> </ul>"},{"location":"modules/#inter-app-communication","title":"Inter-App Communication","text":"<p>The <code>core</code> app often acts as the central coordinator. For example, when a user requests to process a Wikipedia page, the <code>core.views.ProcessOptionView</code> will:</p> <ul> <li>Call functions from <code>scraper.views</code> to get scraped content.</li> <li>Call methods from <code>core.wiki_api.WikiAPI</code> (which is part of the <code>core</code> app but interacts with an external service) for summaries.</li> <li>Call functions from <code>captioner.views</code> to get image captions.</li> </ul> <p>This layered approach allows each app to specialize in its domain while contributing to the overall functionality of the application.</p>"},{"location":"modules/#exploring-further","title":"Exploring Further","text":"<p>For detailed information on each app, please refer to their respective pages:</p> <ul> <li>Core App (<code>core</code>)</li> <li>Scraper App (<code>scraper</code>)</li> <li>Captioner App (<code>captioner</code>)</li> <li>API App (<code>api</code>)</li> </ul>"},{"location":"modules/api_app/","title":"API App (<code>api</code>)","text":"<p>The <code>api</code> app in the Chakshu project primarily serves as a routing and namespacing layer for the various API endpoints provided by the application.</p>"},{"location":"modules/api_app/#responsibilities","title":"Responsibilities","text":"<ul> <li>API URL Aggregation: It groups API-related URL patterns from other apps under a common prefix (e.g., <code>/api/</code>).</li> <li>Versioning (Potential): While not explicitly shown, an app like this is often used to implement API versioning (e.g., <code>/api/v1/</code>, <code>/api/v2/</code>).</li> <li>Global API Configuration (Potential): Could house middleware or settings specific to the API, although most of this seems to be handled at the project level in <code>chakshu/settings.py</code>.</li> </ul>"},{"location":"modules/api_app/#key-files-and-components","title":"Key Files and Components","text":"<ul> <li> <p><code>urls.py</code>:</p> <ul> <li>This is the most important file in the <code>api</code> app based on the provided information.</li> <li>Its <code>urlpatterns</code> include URL configurations from other apps:     <pre><code>from django.urls import include, path\n\nurlpatterns = [\n    path(\"\", include(\"core.urls\")),\n    path(\"\", include(\"scraper.urls\")),\n]\n</code></pre></li> <li>This means that any URLs defined in <code>core.urls.py</code> and <code>scraper.urls.py</code> will be accessible under the path where <code>api.urls</code> is itself included (which is <code>/api/</code> as defined in <code>chakshu/urls.py</code>).</li> <li>For example, if <code>core.urls</code> has <code>path(\"search/\", ...)</code>, the full path becomes <code>/api/search/</code>.</li> </ul> </li> <li> <p><code>views.py</code>:</p> <ul> <li>The provided file structure lists <code>api/views.py</code>.</li> <li>It's possible this file is empty or contains minimal views if the app's primary role is routing.</li> <li>Alternatively, it could contain high-level API views, such as an API root view that lists available endpoints, or views related to API-wide concerns like authentication if that were managed here.</li> </ul> </li> <li> <p><code>models.py</code>, <code>admin.py</code>, <code>apps.py</code>, <code>tests.py</code>:</p> <ul> <li>These are standard Django app files.</li> <li><code>models.py</code>: Unlikely to contain significant models if the app is purely for routing, but could be used for API logging or metadata.</li> <li>The other files would serve their standard purposes.</li> </ul> </li> </ul>"},{"location":"modules/api_app/#how-it-fits-in","title":"How It Fits In","text":"<ol> <li>A request comes to the Django project (e.g., <code>http://127.0.0.1:8000/api/search/?q=test</code>).</li> <li>The main <code>chakshu/urls.py</code> matches the <code>api/</code> prefix and passes the rest of the path (<code>search/?q=test</code>) to <code>api.urls</code>.     <pre><code># chakshu/urls.py\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"api/\", include(\"api.urls\")), # &lt;--- Match\n]\n</code></pre></li> <li><code>api/urls.py</code> then tries to match the remaining path. In this example, <code>path(\"\", include(\"core.urls\"))</code> would delegate the <code>search/</code> part to <code>core.urls.py</code>.</li> <li><code>core.urls.py</code> finally matches <code>search/</code> to <code>SearchResultsView</code>.</li> </ol>"},{"location":"modules/api_app/#development-considerations","title":"Development Considerations","text":"<ul> <li>Clarity of Routing: Ensure that the includes in <code>api/urls.py</code> are clear and don't lead to ambiguous or conflicting URL patterns.</li> <li>API Versioning: If the API is expected to evolve significantly, consider implementing a versioning strategy using this app (e.g., by creating sub-namespaces like <code>path(\"v1/\", include(\"core.v1.urls\"))</code>).</li> <li>Minimal Logic: Generally, an app dedicated to API routing should contain minimal business logic itself, delegating that to the apps providing the actual features.</li> </ul>"},{"location":"modules/captioner_app/","title":"Captioner App (<code>captioner</code>)","text":"<p>The <code>captioner</code> app is responsible for providing captions for images found on Wikipedia pages.</p>"},{"location":"modules/captioner_app/#responsibilities","title":"Responsibilities","text":"<ul> <li>Image Identification: Potentially identifying images on a page (though image URLs might be passed from the <code>scraper</code> app).</li> <li>Caption Retrieval/Generation:<ul> <li>Fetching existing captions (e.g., from HTML <code>alt</code> text, <code>figcaption</code> elements, or surrounding text).</li> <li>Utilizing metadata associated with images, if available (as suggested by <code>metadata_image_captioner.py</code>).</li> <li>Possibly integrating with AI models for generating captions if no explicit captions are found (though this is an advanced feature not explicitly shown).</li> </ul> </li> <li>Data Formatting: Presenting the captions in a usable format.</li> </ul>"},{"location":"modules/captioner_app/#key-files-and-components","title":"Key Files and Components","text":"<ul> <li> <p><code>views.py</code>:</p> <ul> <li><code>Workspace_and_process_images(selected_link)</code>:<ul> <li>This is the primary function exposed by the <code>captioner</code> app, called by <code>core.views.ProcessOptionView</code> when <code>option=4</code> is selected.</li> <li>The exact implementation is not provided, but it would involve:<ol> <li>Getting image URLs for the <code>selected_link</code> (likely by calling a function from the <code>scraper</code> app, e.g., <code>scraper.views.get_image_urls()</code>).</li> <li>For each image, attempting to find or generate a caption using logic from <code>image_captioner.py</code> and/or <code>metadata_image_captioner.py</code>.</li> <li>Aggregating these captions and returning them. The return format is <code>ls_captions</code>, which is then passed to <code>JsonResponse</code> in <code>core.views</code>.</li> </ol> </li> </ul> </li> </ul> </li> <li> <p><code>image_captioner.py</code>:</p> <ul> <li>This file is expected to contain the core logic for deriving captions from image context or simple attributes.</li> <li>This might involve:<ul> <li>Scraping the HTML around an image tag.</li> <li>Looking for <code>&lt;figcaption&gt;</code> elements.</li> <li>Using <code>alt</code> text or <code>title</code> attributes of <code>&lt;img&gt;</code> tags.</li> <li>Basic heuristics based on surrounding text.</li> </ul> </li> <li>Developer Note: The specific strategies used in this file will determine the quality and source of the captions.</li> </ul> </li> <li> <p><code>metadata_image_captioner.py</code>:</p> <ul> <li>This file suggests an alternative or supplementary approach to captioning, focusing on metadata.</li> <li>This could involve:<ul> <li>Fetching image metadata if images are hosted on platforms like Wikimedia Commons, which often have structured descriptions.</li> <li>Parsing EXIF data if accessible (less likely in a web context).</li> </ul> </li> <li>Developer Note: Understanding how this module complements or differs from <code>image_captioner.py</code> is important.</li> </ul> </li> <li> <p><code>models.py</code>:</p> <ul> <li>The file structure shows <code>captioner/models.py</code> and a migration <code>0001_initial.py</code>. This implies that the <code>captioner</code> app might store data, such as:<ul> <li>Cached captions to avoid re-processing.</li> <li>Associations between image URLs and their captions.</li> </ul> </li> <li>Developers should inspect the current models to understand what data is persisted.</li> </ul> </li> <li> <p><code>admin.py</code>, <code>apps.py</code>, <code>tests.py</code>: Standard Django app files. <code>admin.py</code> would be used to register any <code>captioner</code> models with the Django admin interface.</p> </li> </ul>"},{"location":"modules/captioner_app/#interaction-with-other-modules","title":"Interaction with Other Modules","text":"<ul> <li><code>core</code> app: The <code>core.views.ProcessOptionView</code> calls <code>captioner.views.fetch_and_process_images</code>.</li> <li><code>scraper</code> app (Likely): The <code>captioner</code> app will likely need image URLs from the <code>scraper</code> app to know which images to process. This could be a direct function call (e.g., <code>captioner.views</code> calling <code>scraper.views.get_image_urls()</code>) or image URLs could be passed into <code>Workspace_and_process_images</code>.</li> </ul>"},{"location":"modules/captioner_app/#development-considerations","title":"Development Considerations","text":"<ul> <li>Caption Sources: Determine the priority and reliability of different caption sources (alt text, figcaption, metadata, generated).</li> <li>Accuracy: The accuracy of captions is crucial. If generating captions, the quality of the model or heuristics will be important.</li> <li>Performance: Captioning multiple images can be time-consuming. Consider:<ul> <li>Batch processing.</li> <li>Caching results in <code>captioner.models</code>.</li> <li>Asynchronous processing if caption generation is slow (though the current <code>core.views</code> call is synchronous).</li> </ul> </li> <li>Handling Missing Captions: Define a clear strategy for images where no caption can be found.</li> <li>External Libraries/Services: If using advanced AI captioning models, manage those dependencies and any associated API keys or model files. The current snippets do not show such advanced features.</li> </ul>"},{"location":"modules/core_app/","title":"Core App (<code>core</code>)","text":"<p>The <code>core</code> app is central to the Chakshu application's functionality. It orchestrates the main business logic, handles API requests for searching and processing Wikipedia articles, and interacts with other apps and external services.</p>"},{"location":"modules/core_app/#responsibilities","title":"Responsibilities","text":"<ul> <li>API Endpoint Handling: Defines and manages the primary API endpoints (<code>/search/</code>, <code>/select/</code>, <code>/process/</code>) through its views.</li> <li>Workflow Orchestration: Coordinates the flow of data and actions, such as receiving a search query, fetching results, allowing selection, and then delegating processing tasks to appropriate modules (scraper, captioner, WikiAPI).</li> <li>External API Interaction: Contains <code>wiki_api.py</code>, a dedicated client for communicating with the MediaWiki API to fetch structured data like page summaries.</li> <li>Data Formatting: Prepares and structures the JSON responses sent back to the client.</li> </ul>"},{"location":"modules/core_app/#key-files-and-components","title":"Key Files and Components","text":"<ul> <li> <p><code>views.py</code>:</p> <ul> <li><code>SearchResultsView</code>:<ul> <li>Handles <code>GET /api/search/</code>.</li> <li>Takes a search query <code>q</code>.</li> <li>Uses <code>googlesearch.search</code> to find Wikipedia articles.</li> <li>Employs <code>joblib.Parallel</code> and <code>joblib.delayed</code> for concurrent fetching of short descriptions via <code>scraper.views.get_short_description</code>.</li> <li>Formats and returns search results.</li> </ul> </li> <li><code>SelectLinkView</code>:<ul> <li>Handles <code>GET /api/select/</code>.</li> <li>Takes a Wikipedia article <code>link</code>.</li> <li>Returns a predefined list of processing options.</li> </ul> </li> <li><code>ProcessOptionView</code>:<ul> <li>Handles <code>GET /api/process/</code>.</li> <li>Takes a <code>link</code> and a numeric <code>option</code>.</li> <li>Acts as a dispatcher based on the <code>option</code>:<ul> <li>Option 1 (Short Description): Calls <code>scraper.views.get_short_description()</code>.</li> <li>Option 2 (Summary): Calls <code>mediawiki_api.get_page_summary()</code> (from <code>core.wiki_api.WikiAPI</code>).</li> <li>Option 3 (Full Content): Calls <code>scraper.views.get_full_content()</code>.</li> <li>Option 4 (Image Captions): Calls <code>captioner.views.fetch_and_process_images()</code>.</li> <li>Option 5 (Citations): Calls <code>scraper.views.get_citations()</code>.</li> </ul> </li> <li>Formats and returns the processed data.</li> </ul> </li> </ul> </li> <li> <p><code>urls.py</code>:</p> <ul> <li>Defines the URL patterns for the views mentioned above:<ul> <li><code>path(\"search/\", SearchResultsView.as_view(), name=\"search_results\")</code></li> <li><code>path(\"select/\", SelectLinkView.as_view(), name=\"select_link\")</code></li> <li><code>path(\"process/\", ProcessOptionView.as_view(), name=\"process_option\")</code></li> </ul> </li> <li>These URLs are included under the <code>/api/</code> namespace via <code>api/urls.py</code>.</li> </ul> </li> <li> <p><code>wiki_api.py</code>:</p> <ul> <li>Contains the <code>WikiAPI</code> class.</li> <li>This class is responsible for making requests to the MediaWiki API (e.g., <code>action=query&amp;format=json&amp;prop=extracts&amp;exintro=true&amp;explaintext=true</code> for summaries).</li> <li>The instance <code>mediawiki_api = WikiAPI(user_agent=\"Chakshu (chakshu@pec.edu.in)\")</code> is used by <code>ProcessOptionView</code>.</li> <li>Developer Note: The exact implementation details of <code>WikiAPI</code> (methods, error handling, request construction) should be examined by developers working on this module.</li> </ul> </li> <li> <p><code>models.py</code>:</p> <ul> <li>The provided file structure shows <code>models.py</code>. While the views don't explicitly interact with <code>core</code> models in the snippets, this file would define any database tables specific to the <code>core</code> app's needs (e.g., logging API requests, storing user preferences if features expand).</li> <li>The migrations history (<code>0001_initial</code> to <code>0008_delete_imagecaption_delete_wikipediapage</code>) indicates that models related to <code>WikipediaImageCaption</code>, <code>ImageCaption</code>, and <code>WikipediaPage</code> have existed in this app at various points. Developers should check the current <code>models.py</code> to understand the active data schema.</li> </ul> </li> <li> <p><code>hyperlinks.py</code>:</p> <ul> <li>The purpose and content of this file are unknown from the provided information. It might contain utility functions for manipulating or generating URLs.</li> </ul> </li> </ul>"},{"location":"modules/core_app/#interaction-with-other-modules","title":"Interaction with Other Modules","text":"<ul> <li><code>scraper</code> app: <code>core.views</code> calls functions in <code>scraper.views</code> to get scraped data like short descriptions, full content, and citations.</li> <li><code>captioner</code> app: <code>core.views</code> calls <code>captioner.views.fetch_and_process_images</code> for image captioning.</li> </ul>"},{"location":"modules/core_app/#development-considerations","title":"Development Considerations","text":"<ul> <li>Error Handling: Ensure robust error handling within views, especially for external calls (Google Search, WikiAPI, other apps).</li> <li>Performance: The use of <code>joblib</code> in <code>SearchResultsView</code> is a good practice. Evaluate other areas for potential performance bottlenecks, especially in <code>ProcessOptionView</code> when dealing with large pages or many images.</li> <li>Extensibility: Design views and services in a way that allows new processing options or data sources to be added with relative ease.</li> <li>Configuration: API keys or sensitive parameters for external services (like a more specific User-Agent for WikiAPI if needed) should ideally be managed via <code>settings.py</code> or <code>config.py</code> rather than being hardcoded.</li> </ul>"},{"location":"modules/scraper_app/","title":"Scraper App (<code>scraper</code>)","text":"<p>The <code>scraper</code> app is dedicated to fetching and parsing content from web pages, with a primary focus on Wikipedia articles.</p>"},{"location":"modules/scraper_app/#responsibilities","title":"Responsibilities","text":"<ul> <li>Content Fetching: Retrieving HTML content from given URLs.</li> <li>HTML Parsing: Extracting specific information from the HTML structure, such as:<ul> <li>Short descriptions</li> <li>Full page text</li> <li>Citations/references</li> <li>Image URLs</li> </ul> </li> <li>Data Cleaning: Potentially cleaning the extracted HTML or text content.</li> </ul>"},{"location":"modules/scraper_app/#key-files-and-components","title":"Key Files and Components","text":"<ul> <li> <p><code>views.py</code>:</p> <ul> <li>This file contains helper functions that are called by other parts of the application (primarily <code>core.views</code>) to perform scraping tasks. It does not seem to define direct API endpoints for external use in the main workflow but rather service functions.</li> <li><code>get_short_description(url)</code>:<ul> <li>Instantiates <code>WikipediaScraper</code>.</li> <li>Calls <code>scraper.fetch_wikipedia_content(url)</code> to get the page's <code>BeautifulSoup</code> object.</li> <li>Calls <code>scraper.fetch_short_description(soup)</code> to extract the short description.</li> </ul> </li> <li><code>get_citations(url)</code>:<ul> <li>Instantiates <code>WikipediaScraper</code>.</li> <li>Calls <code>scraper.main(url)</code> (presumably this method initializes scraping and populates scraper instance attributes like <code>citations</code>).</li> <li>Returns <code>scraper.citations</code>.</li> </ul> </li> <li><code>get_full_content(url)</code>:<ul> <li>Instantiates <code>WikipediaScraper</code>.</li> <li>Calls <code>scraper.main(url)</code> (or a similar method to get all content).</li> <li>Returns the full content.</li> </ul> </li> <li><code>get_image_urls(url)</code>:<ul> <li>Instantiates <code>WikipediaScraper</code>.</li> <li>Calls <code>scraper.main(url)</code>.</li> <li>Returns <code>scraper.images</code> (a list of image URLs).</li> </ul> </li> <li><code>WikiSummaryScraper</code> (Class-Based View):<ul> <li>This view (<code>GET</code> method) seems to be a standalone utility to fetch and return a summary by scraping paragraphs directly. It's not used in the main <code>core.views.ProcessOptionView</code> flow for summaries (which uses <code>WikiAPI</code>). It might be for internal testing or an alternative approach.</li> </ul> </li> </ul> </li> <li> <p><code>scraper.py</code> (Assumed Location):</p> <ul> <li>This file is expected to contain the <code>WikipediaScraper</code> class, which is the core of the scraping logic.</li> <li><code>WikipediaScraper</code> Class:<ul> <li><code>Workspace_wikipedia_content(url)</code>: Likely uses a library like <code>requests</code> to get the page HTML and <code>BeautifulSoup</code> to parse it.</li> <li><code>Workspace_short_description(soup)</code>: Implements logic to find and extract the short description element from the parsed HTML.</li> <li><code>main(url)</code>: A central method that likely orchestrates the fetching and parsing of various page elements (text, images, citations), storing them in instance attributes.</li> <li>Other methods for cleaning HTML (<code>clean_html_tags</code>), extracting specific sections, etc.</li> </ul> </li> <li>Developer Note: The implementation of <code>WikipediaScraper</code> is crucial. Developers should thoroughly understand its parsing logic, CSS selectors or XPath expressions used, and error handling for network issues or changes in Wikipedia's HTML structure.</li> </ul> </li> <li> <p><code>imageScrapper.py</code>:</p> <ul> <li>The purpose of this file is distinct from <code>scraper.py</code>. It might contain specialized logic for finding image URLs or processing images in a way that <code>scraper.py</code> doesn't cover, or it could be an alternative image scraping mechanism. Its interaction with <code>WikipediaScraper</code> or other parts of the app needs to be determined by examining its content.</li> </ul> </li> <li> <p><code>models.py</code>:</p> <ul> <li>If the scraper needs to store fetched data persistently (e.g., for caching raw HTML, parsed sections), models would be defined here. The directory structure includes it, but no specific models are detailed in the provided context.</li> </ul> </li> <li> <p><code>urls.py</code>:</p> <ul> <li>The file structure shows <code>scraper/urls.py</code>. While not explicitly detailed, if this app exposes any direct API endpoints (e.g., for testing scraper functionalities independently), they would be defined here and included in <code>api/urls.py</code>.</li> </ul> </li> </ul>"},{"location":"modules/scraper_app/#dependencies","title":"Dependencies","text":"<ul> <li><code>requests</code> (likely): For making HTTP requests.</li> <li><code>BeautifulSoup4</code> (likely): For parsing HTML.</li> </ul>"},{"location":"modules/scraper_app/#development-considerations","title":"Development Considerations","text":"<ul> <li>Robustness to HTML Changes: Web scraping is fragile and can break if the target website's structure changes. The selectors used in <code>WikipediaScraper</code> should be as resilient as possible. Consider using more stable identifiers if available (e.g., <code>id</code> attributes, specific classes).</li> <li>Rate Limiting/User-Agent: When scraping websites, it's important to be respectful. Implement proper User-Agent strings. For Wikipedia, the MediaWiki API (<code>core.wiki_api.py</code>) is generally preferred for structured data to avoid stressing raw page loads. The scraper might be used for content not easily available via the API.</li> <li>Error Handling: Implement comprehensive error handling for network errors, timeouts, and parsing errors (e.g., when expected HTML elements are not found).</li> <li>Maintainability: Keep scraping logic well-organized and documented, especially the parts that rely on specific HTML structures.</li> <li>Alternative Data Sources: For Wikipedia, always consider if the MediaWiki API can provide the required information more reliably than scraping. The current setup uses a mix, which is a good approach.</li> </ul>"}]}